/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/Azure/aad-pod-identity/pkg/apis/aadpodidentity/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AzureAssignedIdentityLister helps list AzureAssignedIdentities.
type AzureAssignedIdentityLister interface {
	// List lists all AzureAssignedIdentities in the indexer.
	List(selector labels.Selector) (ret []*v1.AzureAssignedIdentity, err error)
	// AzureAssignedIdentities returns an object that can list and get AzureAssignedIdentities.
	AzureAssignedIdentities(namespace string) AzureAssignedIdentityNamespaceLister
	AzureAssignedIdentityListerExpansion
}

// azureAssignedIdentityLister implements the AzureAssignedIdentityLister interface.
type azureAssignedIdentityLister struct {
	indexer cache.Indexer
}

// NewAzureAssignedIdentityLister returns a new AzureAssignedIdentityLister.
func NewAzureAssignedIdentityLister(indexer cache.Indexer) AzureAssignedIdentityLister {
	return &azureAssignedIdentityLister{indexer: indexer}
}

// List lists all AzureAssignedIdentities in the indexer.
func (s *azureAssignedIdentityLister) List(selector labels.Selector) (ret []*v1.AzureAssignedIdentity, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AzureAssignedIdentity))
	})
	return ret, err
}

// AzureAssignedIdentities returns an object that can list and get AzureAssignedIdentities.
func (s *azureAssignedIdentityLister) AzureAssignedIdentities(namespace string) AzureAssignedIdentityNamespaceLister {
	return azureAssignedIdentityNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AzureAssignedIdentityNamespaceLister helps list and get AzureAssignedIdentities.
type AzureAssignedIdentityNamespaceLister interface {
	// List lists all AzureAssignedIdentities in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AzureAssignedIdentity, err error)
	// Get retrieves the AzureAssignedIdentity from the indexer for a given namespace and name.
	Get(name string) (*v1.AzureAssignedIdentity, error)
	AzureAssignedIdentityNamespaceListerExpansion
}

// azureAssignedIdentityNamespaceLister implements the AzureAssignedIdentityNamespaceLister
// interface.
type azureAssignedIdentityNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AzureAssignedIdentities in the indexer for a given namespace.
func (s azureAssignedIdentityNamespaceLister) List(selector labels.Selector) (ret []*v1.AzureAssignedIdentity, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AzureAssignedIdentity))
	})
	return ret, err
}

// Get retrieves the AzureAssignedIdentity from the indexer for a given namespace and name.
func (s azureAssignedIdentityNamespaceLister) Get(name string) (*v1.AzureAssignedIdentity, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("azureassignedidentity"), name)
	}
	return obj.(*v1.AzureAssignedIdentity), nil
}
