{{- if eq .Values.operationMode "standard" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "aad-pod-identity.mic.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "aad-pod-identity.labels" . | nindent 4 }}
    app.kubernetes.io/component: mic
  annotations:
    description: {{ .Chart.Description }}
spec:
  replicas: {{ .Values.mic.replicas }}
  selector:
    matchLabels:
      {{- include "aad-pod-identity.selectors" . | nindent 6 }}
      app.kubernetes.io/component: mic
  template:
    metadata:
      labels:
        {{- include "aad-pod-identity.labels" . | nindent 8 }}
        app.kubernetes.io/component: mic
      {{- if .Values.mic.podLabels }}
      {{- toYaml .Values.mic.podLabels | nindent 8 }}
      {{- end }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/mic-secret.yaml") . | sha256sum }}
        {{- if .Values.mic.podAnnotations }}
        {{ toYaml .Values.mic.podAnnotations | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}
      {{- if .Values.rbac.enabled }}
      serviceAccountName: {{ template "aad-pod-identity.mic.fullname" . }}
      {{- end }}
      {{- if .Values.mic.priorityClassName }}
      priorityClassName: {{ .Values.mic.priorityClassName | quote }}
      {{- end }}
      containers:
      - name: mic
        image: "{{ .Values.image.repository }}/{{ .Values.mic.image }}:{{ .Values.mic.tag }}"
        imagePullPolicy: {{ .Values.image.imagePullPolicy }}
        args:
          {{- if not .Values.adminsecret }}
          - "--cloudconfig={{ .Values.mic.cloudConfig }}"
          {{- end }}
          - "--logtostderr"
          {{- if .Values.mic.loggingFormat }}
          - --log-format={{ .Values.mic.loggingFormat }}
          {{- end}}
          {{- if .Values.mic.logVerbosity }}
          - -v={{ .Values.mic.logVerbosity }}
          {{- end }}
          {{- if .Values.mic.leaderElection.instance }}
          - --leader-election-instance={{ .Values.mic.leaderElection.instance }}
          {{- end }}
          {{- if .Values.mic.leaderElection.namespace }}
          - --leader-election-namespace={{ .Values.mic.leaderElection.namespace }}
          {{- end }}
          {{- if .Values.mic.leaderElection.name }}
          - --leader-election-name={{ .Values.mic.leaderElection.name }}
          {{- end }}
          {{- if .Values.mic.leaderElection.duration }}
          - --leader-election-duration={{ .Values.mic.leaderElection.duration }}
          {{- end }}
          {{- if .Values.mic.probePort }}
          - --http-probe-port={{ .Values.mic.probePort }}
          {{- end }}
          {{- if .Values.mic.createDeleteBatch }}
          - --createDeleteBatch={{ .Values.mic.createDeleteBatch }}
          {{- end }}
          {{- if .Values.mic.clientQps }}
          - --clientQps={{ .Values.mic.clientQps }}
          {{- end }}
          {{- if .Values.mic.immutableUserMSIs }}
          - "--immutable-user-msis={{- join "," .Values.mic.immutableUserMSIs}}"
          {{- end }}
          {{- if .Values.mic.prometheusPort }}
          - --prometheus-port={{ .Values.mic.prometheusPort }}
          {{- end }}
          {{- if.Values.mic.syncRetryDuration }}
          - --syncRetryDuration={{ .Values.mic.syncRetryDuration }}
          {{- end}}
          {{- if .Values.mic.updateUserMSIMaxRetry }}
          - --update-user-msi-max-retry={{ .Values.mic.updateUserMSIMaxRetry }}
          {{- end }}
          {{- if .Values.mic.updateUserMSIRetryInterval }}
          - --update-user-msi-retry-interval={{ .Values.mic.updateUserMSIRetryInterval }}
          {{- end }}
          {{- if .Values.mic.identityAssignmentReconcileInterval }}
          - --identity-assignment-reconcile-interval={{ .Values.mic.identityAssignmentReconcileInterval }}
          {{- end }}
          {{- if .Values.customUserAgent }}
          - --custom-user-agent={{ .Values.customUserAgent }}
          {{- end }}
        {{- if not .Values.adminsecret }}
        securityContext:
          runAsUser: 0
        {{- end }}
        env:
          - name: MIC_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: FORCENAMESPACED
            value: "{{ .Values.forceNamespaced }}"
          {{- if .Values.adminsecret }}
          - name: CLOUD
            valueFrom:
              secretKeyRef:
                key: Cloud
                name: {{ template "aad-pod-identity.mic.fullname" . }}
          - name: SUBSCRIPTION_ID
            valueFrom:
              secretKeyRef:
                key: SubscriptionID
                name: {{ template "aad-pod-identity.mic.fullname" . }}
          - name: RESOURCE_GROUP
            valueFrom:
              secretKeyRef:
                key: ResourceGroup
                name: {{ template "aad-pod-identity.mic.fullname" . }}
          - name: VM_TYPE
            valueFrom:
              secretKeyRef:
                key: VMType
                name: {{ template "aad-pod-identity.mic.fullname" . }}
          - name: TENANT_ID
            valueFrom:
              secretKeyRef:
                key: TenantID
                name: {{ template "aad-pod-identity.mic.fullname" . }}
          - name: CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: ClientID
                name: {{ template "aad-pod-identity.mic.fullname" . }}
          - name: CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: ClientSecret
                name: {{ template "aad-pod-identity.mic.fullname" . }}
          {{- if .Values.adminsecret.useMSI }}
          - name: USE_MSI
            valueFrom:
              secretKeyRef:
                key: UseMSI
                name: {{ template "aad-pod-identity.mic.fullname" . }}
          - name: USER_ASSIGNED_MSI_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: UserAssignedMSIClientID
                name: {{ template "aad-pod-identity.mic.fullname" . }}
          {{- end }}
          {{- end }}
        {{- if .Values.mic.prometheusPort }}
        ports:
          - containerPort: {{ .Values.mic.prometheusPort }}
            name: metrics
            protocol: TCP
        {{- end }}
        {{- if not .Values.adminsecret }}
        volumeMounts:
          - name: k8s-azure-file
            mountPath: {{ .Values.mic.cloudConfig }}
            readOnly: true
        {{- end }}
        livenessProbe:
          httpGet:
            path: /healthz
            {{- if .Values.mic.probePort }}
            port: {{ .Values.mic.probePort }}
            {{- else }}
            port: 8080
            {{- end }}
          initialDelaySeconds: 10
          periodSeconds: 5
{{- with .Values.mic.resources }}
        resources:
{{ toYaml . | indent 12 }}
{{- end }}
      {{- if not .Values.adminsecret }}
      volumes:
      - name: k8s-azure-file
        hostPath:
          path: {{ .Values.mic.cloudConfig }}
      {{- end }}
{{- with .Values.mic.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.mic.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.mic.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.mic.topologySpreadConstraints }}
      topologySpreadConstraints:
{{ toYaml . | indent 8 }}
{{- end }}
{{- end -}}
