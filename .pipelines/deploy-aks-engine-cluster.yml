steps:
  - script: |
      echo "Installing aks-engine..."
      curl -LO https://github.com/Azure/aks-engine/releases/download/$(AKS_ENGINE_VERSION)/aks-engine-$(AKS_ENGINE_VERSION)-linux-amd64.tar.gz
      tar -zxvf aks-engine-$(AKS_ENGINE_VERSION)-linux-amd64.tar.gz
      sudo mv aks-engine-$(AKS_ENGINE_VERSION)-linux-amd64/aks-engine /usr/local/bin/
    displayName: "Install aks-engine $(AKS_ENGINE_VERSION)"

  - script: |
      # Generate SSH keypair
      echo -e 'y\n' | ssh-keygen -f id_rsa -t rsa -N '' > /dev/null
      export SSH_PUBLIC_KEY="$(cat id_rsa.pub)"

      envsubst < test/e2e/cluster_configs/$(CLUSTER_CONFIG).json > kubernetes.json
      cat kubernetes.json
    displayName: "Generate API model"
    env:
      AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)

  - script: |
      aks-engine deploy \
        --api-model kubernetes.json \
        --location $(LOCATION) \
        --subscription-id $(SUBSCRIPTION_ID) \
        --client-id $(AZURE_CLIENT_ID) \
        --client-secret $(AZURE_CLIENT_SECRET)

      export KUBECONFIG="$(pwd)/_output/${RESOURCE_GROUP}/kubeconfig/kubeconfig.$(LOCATION).json"
      echo "##vso[task.setvariable variable=KUBECONFIG]${KUBECONFIG}"

      # set CLUSTER_RESOURCE_GROUP for e2e test config
      export CLUSTER_RESOURCE_GROUP="${RESOURCE_GROUP}"
      echo "##vso[task.setvariable variable=CLUSTER_RESOURCE_GROUP]${CLUSTER_RESOURCE_GROUP}"

      # Sleep for 120 seconds to wait for nodes and pods to become ready
      sleep 120
    displayName: "Deploy an aks-engine cluster"

  - script: |
      echo "Installing kubectl..."
      curl -LO https://storage.googleapis.com/kubernetes-release/release/v$(AKS_ENGINE_CLUSTER_VERSION)/bin/linux/amd64/kubectl
      chmod +x kubectl
      sudo mv kubectl /usr/local/bin/
    displayName: "Install kubectl"
