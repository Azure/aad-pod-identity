steps:
  - script: |
      echo "Installing aks-engine..."
      curl -LO https://github.com/Azure/aks-engine/releases/download/$(AKS_ENGINE_VERSION)/aks-engine-$(AKS_ENGINE_VERSION)-linux-amd64.tar.gz
      tar -zxvf aks-engine-$(AKS_ENGINE_VERSION)-linux-amd64.tar.gz
      sudo mv aks-engine-$(AKS_ENGINE_VERSION)-linux-amd64/aks-engine /usr/local/bin/
    displayName: "Install aks-engine $(AKS_ENGINE_VERSION)"

  - script: |
      # Generate SSH keypair
      echo -e 'y\n' | ssh-keygen -f id_rsa -t rsa -N '' > /dev/null
      export SSH_PUBLIC_KEY="$(cat id_rsa.pub)"

      envsubst < test/e2e/cluster_configs/$(CLUSTER_CONFIG).json > kubernetes.json
      cat kubernetes.json
    displayName: "Generate API model"

  - script: |
      aks-engine generate -m kubernetes.json
      az group create -n "${RESOURCE_GROUP}" -l "$(LOCATION)" > /dev/null
      az deployment group create -g "${RESOURCE_GROUP}" -f "_output/${RESOURCE_GROUP}/azuredeploy.json" -p @_output/${RESOURCE_GROUP}/azuredeploy.parameters.json > /dev/null

      KUBECONFIG="$(pwd)/_output/${RESOURCE_GROUP}/kubeconfig/kubeconfig.$(LOCATION).json"
      echo "##vso[task.setvariable variable=KUBECONFIG]${KUBECONFIG}"

      # set NODE_RESOURCE_GROUP for e2e test config
      echo "##vso[task.setvariable variable=NODE_RESOURCE_GROUP]${RESOURCE_GROUP}"

      # Sleep for 120 seconds to wait for nodes and pods to become ready
      sleep 120
    displayName: "Deploy an aks-engine cluster"
