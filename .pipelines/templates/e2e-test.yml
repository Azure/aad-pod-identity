parameters:
  - name: clusterConfigs
    type: object
  - name: buildPlatforms
    type: string
    default: linux/amd64,linux/arm64,linux/arm/v7

jobs:
  - ${{ each clusterConfig in parameters.clusterConfigs }}:
    - job:
      displayName: ${{ format('{0}', clusterConfig) }}
      dependsOn: unit_test
      timeoutInMinutes: 120
      cancelTimeoutInMinutes: 5
      workspace:
        clean: all
      variables:
        - group: aad-pod-identity
        - name: CLUSTER_CONFIG
          value: ${{ format('{0}', clusterConfig) }}
        - name: BUILD_PLATFORMS
          value: ${{ parameters.buildPlatforms }}
      steps:
        - template: az-login.yml

        - template: install-helm.yml

        - template: build-images.yml

        - script: |
            RESOURCE_GROUP="aad-pod-identity-e2e-$(openssl rand -hex 2)"
            echo "##vso[task.setvariable variable=RESOURCE_GROUP]${RESOURCE_GROUP}"
          displayName: "Generate resource group name"

        - ${{ if eq(clusterConfig, 'aks') }}:
          - template: deploy-aks-cluster.yml

          - script: |
              if [[ -n "${GINKGO_SKIP:-}" ]]; then
                GINKGO_SKIP="${GINKGO_SKIP}|"
              fi
              GINKGO_SKIP="${GINKGO_SKIP}should.be.backward.compatible.with.old.and.new.version.of.MIC.and.NMI"
              echo "##vso[task.setvariable variable=GINKGO_SKIP]${GINKGO_SKIP}"
            displayName: "Disable backward compatibility test case"

        - ${{ if not(eq(clusterConfig, 'aks')) }}:
          - template: deploy-aks-engine-cluster.yml

        - template: role-assignment.yml
          parameters:
            identity_resource_group: $(IDENTITY_RESOURCE_GROUP)
            keyvault_resource_group: $(IDENTITY_RESOURCE_GROUP)

        - script: |
            kubectl wait --for=condition=ready node --all
            kubectl wait pod -n kube-system --for=condition=Ready --all
            kubectl get nodes -owide
            kubectl cluster-info
          displayName: "Check cluster's health"

        - script: |
            export REGISTRY="${REGISTRY:-$(REGISTRY_NAME).azurecr.io/k8s/aad-pod-identity}"
            export MIC_VERSION="${IMAGE_VERSION}"
            export NMI_VERSION="${IMAGE_VERSION}"
            export IDENTITY_VALIDATOR_VERSION="${IMAGE_VERSION}"
            make e2e
          env:
            # used by 'When deploying service principal should pass the identity validation' test case
            SERVICE_PRINCIPAL_CLIENT_ID: $(SERVICE_PRINCIPAL_CLIENT_ID)
            SERVICE_PRINCIPAL_CLIENT_SECRET: $(SERVICE_PRINCIPAL_CLIENT_SECRET)
          displayName: "Run E2E tests"

        - script: |
            az role assignment delete --ids ${ROLE_ASSIGNMENT_IDS} || true
            if [[ "${CLUSTER_CONFIG}" == "aks" ]]; then
              az aks delete -g ${RESOURCE_GROUP} -n ${RESOURCE_GROUP} --yes --no-wait
            fi
            az group delete -g ${RESOURCE_GROUP} --yes --no-wait
          condition: always()
          displayName: "Delete resource group and role assignments"

        - template: cleanup-images.yml
