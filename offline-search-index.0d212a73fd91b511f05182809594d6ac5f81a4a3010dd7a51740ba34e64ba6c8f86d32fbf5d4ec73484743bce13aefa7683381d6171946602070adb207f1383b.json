[{"body":" Examples  user-assigned identity  apiVersion:\"aadpodidentity.k8s.io/v1\"kind:AzureIdentitymetadata:name:\u003cAzureIdentityName\u003espec:type:0resourceID:\u003cResourceID\u003eclientID:\u003cClientID\u003e service principal (single-tenant)  apiVersion:v1kind:Secretmetadata:name:\u003cSecretName\u003etype:Opaquedata:clientSecret:\u003cClientSecret\u003e---apiVersion:\"aadpodidentity.k8s.io/v1\"kind:AzureIdentitymetadata:name:\u003cAzureIdentityName\u003espec:type:1tenantID:\u003cTenantID\u003eclientID:\u003cClientID\u003eclientPassword:{\"name\":\"\u003cSecretName\u003e\",\"namespace\":\"\u003cSecretNamespace\u003e\"} service principal (multi-tenant)  apiVersion:v1kind:Secretmetadata:name:\u003cSecretName\u003etype:Opaquedata:clientSecret:\u003cClientSecret\u003e---apiVersion:\"aadpodidentity.k8s.io/v1\"kind:AzureIdentitymetadata:name:\u003cAzureIdentityName\u003espec:type:1tenantID:\u003cPrimaryTenantID\u003eauxiliaryTenantIDs:- \u003cAuxiliaryTenantID1\u003e- \u003cAuxiliaryTenantID2\u003eclientID:\u003cClientID\u003eclientPassword:{\"name\":\"\u003cSecretName\u003e\",\"namespace\":\"\u003cSecretNamespace\u003e\"} service principal (certificate)  apiVersion:v1kind:Secretmetadata:name:\u003cSecretName\u003etype:Opaquedata:certificate:\u003cCertificate\u003epassword:\u003cPassword\u003e---apiVersion:\"aadpodidentity.k8s.io/v1\"kind:AzureIdentitymetadata:name:\u003cAzureIdentityName\u003espec:type:2tenantID:\u003cTenantID\u003eclientID:\u003cClientID\u003eclientPassword:{\"Name\":\"\u003cSecretName\u003e\",\"Namespace\":\"\u003cSecretNamespace\u003e\"} AzureIdentity    Field Description     apiVersion\nstring APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.   kind\nstring Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.   metadata\nObjectMeta Standard object’s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata   spec\nAzureIdentitySpec Describes the specifications of an identity resource on Azure.    AzureIdentitySpec    Field Description     type\ninteger 0: user-assigned identity.\n1: service principal. 2: service principal with certificate.   resourceID\nstring The resource ID of the user-assigned identity (only applicable when type is 0), i.e. /subscriptions/\u003cSubscriptionID\u003e/resourcegroups/\u003cResourceGroup\u003e/providers/Microsoft.ManagedIdentity/userAssignedIdentities/\u003cUserAssignedIdentityName\u003e.   clientID\nstring The client ID of the identity.   clientPassword\nSecretReference The client secret of the identity, represented as a Kubernetes secret (only applicable when type is 1 or 2).   tenantID\nstring The primary tenant ID of the identity (only applicable when type is 1 or 2).   auxiliaryTenantIDs\n[]string The auxiliary tenant IDs of the identity (only applicable when type is 1).   adEndpoint\nstring The Azure Active Directory endpoint.    ","excerpt":" Examples  user-assigned identity …","ref":"/aad-pod-identity/docs/concepts/azureidentity/","title":"AzureIdentity"},{"body":"","excerpt":"","ref":"/aad-pod-identity/docs/getting-started/","title":"Getting Started"},{"body":" Available from 1.3.0-mic-1.4.0-nmi release\n By default, AAD Pod Identity matches pods to identities across namespaces. To match only pods in the namespace containing AzureIdentity, use one of these techniques:\n  Attach a aadpodidentity.k8s.io/Behavior: namespaced annotation to each AzureIdentity resource.\nHere is the AzureIdentity manifest from the previous step with this annotation added:\napiVersion:\"aadpodidentity.k8s.io/v1\"kind:AzureIdentitymetadata:name:\u003ca-idname\u003eannotations:aadpodidentity.k8s.io/Behavior:namespacedspec:type:0resourceID:/subscriptions/\u003csubid\u003e/resourcegroups/\u003cresourcegroup\u003e/providers/Microsoft.ManagedIdentity/userAssignedIdentities/\u003cname\u003eclientID:\u003cclientId\u003e  Add the --forceNamespaced command line argument or set the FORCENAMESPACED=true environment variable when starting both the MIC and NMI components.\nHere is a section from the MIC deployment which adds both the command line argument and the environment variable for illustration. Pick one approach and use it to update both the MIC deployment and the NMI daemon set.\nspec:containers:- name:micimage:\"mcr.microsoft.com/k8s/aad-pod-identity/mic:1.3\"args:- \"--cloudconfig=/etc/kubernetes/azure.json\"- \"--logtostderr\"- \"--forceNamespaced\"env:- name:FORCENAMESPACEDvalue:\"true\"  ","excerpt":" Available from 1.3.0-mic-1.4.0-nmi release\n By default, AAD Pod …","ref":"/aad-pod-identity/docs/configure/match_pods_in_namespace/","title":"Match Pods in the Namespace"},{"body":"Your cluster will need the correct role assignment configuration to perform Azure-related operations such as assigning and un-assigning the identity on the underlying VM/VMSS. You can run the following commands to help you set up the appropriate role assignments for your cluster identity before deploying aad-pod-identity.\n NOTE: If you’re running aad-pod-identity in managed mode you don’t need these role assignments. If you’re using the AKS pod-managed identities add-on, refer to the AKS add-on documentation for the required role assignments.\n AKS and aks-engine clusters require an identity to communicate with Azure. This identity can be either a managed identity (in the form of system-assigned identity or user-assigned identity) or a service principal. This section explains various role assignments that need to be performed before using AAD Pod Identity. Without the proper role assignments, your Azure cluster will not have the correct permission to assign and un-assign identities from the underlying virtual machines (VM) or virtual machine scale sets (VMSS).\nIn the case of self-managed clusters (manual installation of Kubernetes on Azure VMs), you’ll need to assign a user-assigned managed identity to the VM or VMSS or use a service principal. This is required for MIC to perform Azure-related operations for assigning/un-assigning the identity required for applications.\nexport SUBSCRIPTION_ID=\"\u003cSubscriptionID\u003e\" export RESOURCE_GROUP=\"\u003cAKSResourceGroup\u003e\" export CLUSTER_NAME=\"\u003cAKSClusterName\u003e\" # Optional: if you are planning to deploy your user-assigned identities # in a separate resource group instead of your node resource group export IDENTITY_RESOURCE_GROUP=\"\u003cIdentityResourceGroup\u003e\" curl -s https://raw.githubusercontent.com/Azure/aad-pod-identity/master/hack/role-assignment.sh | bash  Note: \u003cAKSResourceGroup\u003e is where your AKS cluster is deployed to.\n Introduction Currently, MIC uses one of the following two ways to authenticate with Azure:\n Managed Identity (system-assigned identity or user-assigned identity) Service Principal through /etc/kubernetes/azure.json, which is available in every node, or credentials defined by environment variables;   Clusters with managed identity are only compatible with AAD Pod Identity 1.5+.\n More on authentication methods /etc/kubernetes/azure.json is a well-known JSON file in each node that provides the details about which method MIC uses for authentication:\n   Authentication method /etc/kubernetes/azure.json fields used     System-assigned managed identity useManagedIdentityExtension: true and userAssignedIdentityID:\"\"   User-assigned managed identity useManagedIdentityExtension: true and userAssignedIdentityID:\"\u003cUserAssignedIdentityID\u003e\"   Service principal (default) aadClientID: \"\u003cAADClientID\u003e\" and aadClientSecret: \"\u003cAADClientSecret\u003e\"    Obtaining the ID of the managed identity / service principal After your cluster is provisioned, depending on your cluster identity configuration, run one of the following commands to retrieve the ID of your managed identity or service principal, which will be used for role assignment in the next section:\n   Cluster configuration Command     AKS cluster with service principal az aks show -g \u003cAKSResourceGroup\u003e -n \u003cAKSClusterName\u003e --query servicePrincipalProfile.clientId -o tsv   AKS cluster with managed identity az aks show -g \u003cAKSResourceGroup\u003e -n \u003cAKSClusterName\u003e --query identityProfile.kubeletidentity.clientId -o tsv   aks-engine cluster with service principal Use the client ID of the service principal defined in the API model   aks-engine cluster with system-assigned identity az \u003cvm|vmss\u003e identity show -g \u003cNodeResourceGroup\u003e -n \u003cVM|VMSS Name\u003e --query principalId -o tsv   aks-engine cluster with user-assigned identity az \u003cvm|vmss\u003e identity show -g \u003cNodeResourceGroup\u003e -n \u003cVM|VMSS Name\u003e --query userAssignedIdentities -o tsv, then copy the clientID of the selected user-assigned identity    Performing role assignments The roles Managed Identity Operator and Virtual Machine Contributor must be assigned to the cluster managed identity or service principal, identified by the ID obtained above, before deploying AAD Pod Identity so that it can assign and un-assign identities from the underlying VM/VMSS.\n For AKS cluster, the node resource group refers to the resource group with a MC_ prefix, which contains all of the infrastructure resources associated with the cluster like VM/VMSS.\n az role assignment create --role \"Managed Identity Operator\" --assignee \u003cID\u003e --scope /subscriptions/\u003cSubscriptionID\u003e/resourcegroups/\u003cNodeResourceGroup\u003e az role assignment create --role \"Virtual Machine Contributor\" --assignee \u003cID\u003e --scope /subscriptions/\u003cSubscriptionID\u003e/resourcegroups/\u003cNodeResourceGroup\u003e  RBAC and non-RBAC clusters require the same role assignments.\n User-assigned identities that are not within the node resource group There are additional role assignments required if you wish to assign user-assigned identities that are not within the node resource group. You can run the following command to assign the Managed Identity Operator role with the identity resource group scope:\naz role assignment create --role \"Managed Identity Operator\" --assignee \u003cID\u003e --scope /subscriptions/\u003cSubscriptionID\u003e/resourcegroups/\u003cIdentityResourceGroup\u003e To enable fine-grained control on which user-assigned identity the cluster has access to, run the following command:\naz role assignment create --role \"Managed Identity Operator\" --assignee \u003cID\u003e --scope /subscriptions/\u003cSubscriptionID\u003e/resourcegroups/\u003cIdentityResourceGroup\u003e/providers/Microsoft.ManagedIdentity/userAssignedIdentities/\u003cIdentityName\u003e User-assigned managed identities for self-managed clusters If you deploy the VMs and install Kubernetes instead of using tools like aks-engine or capz, you’ll need to assign the user-assigned managed identity to the underlying VMs.\nFor VMSS az vmss identity assign -n \u003cVMSS name\u003e -g \u003crg\u003e --identities \u003cIdentityResourceID\u003e For VMs az vm identity assign -n \u003cVM name\u003e -g \u003crg\u003e --identities \u003cIdentityResourceID\u003e Repeat for all your worker node VMs.\nReducing number of role assignments Currently there’s a limit of 2000 role assignments allowed within an Azure subscription. Once you’ve hit this limit, you will not be able to assign new roles.\nTo reduce the number of role assignments, one thing you could do is instead of assigning the Managed Identity Operator role to managed identities individually, you could assign the Managed Identity Operator role to the resource group the managed identities belong to. Resources will inherit roles from the resource group, meaning you can create as many managed identities as you need and not affect the subscription’s overall role assignment count.\nUseful links  Use managed identities in AKS Service principals with AKS What are managed identities for Azure resources?  ","excerpt":"Your cluster will need the correct role assignment configuration to …","ref":"/aad-pod-identity/docs/getting-started/role-assignment/","title":"Role Assignment"},{"body":"Run the following commands to set Azure-related environment variables and login to Azure via az login:\nexport SUBSCRIPTION_ID=\"\u003cSubscriptionID\u003e\" # login as a user and set the appropriate subscription ID az login az account set -s \"${SUBSCRIPTION_ID}\" export RESOURCE_GROUP=\"\u003cAKSResourceGroup\u003e\" export CLUSTER_NAME=\"\u003cAKSClusterName\u003e\" # for this demo, we will be deploying a user-assigned identity to the AKS node resource group export IDENTITY_RESOURCE_GROUP=\"$(az aks show -g ${RESOURCE_GROUP} -n ${CLUSTER_NAME} --query nodeResourceGroup -otsv)\" export IDENTITY_NAME=\"demo\"  For AKS clusters, there are two resource groups that you need to be aware of - the resource group where you deploy your AKS cluster to (denoted by the environment variable RESOURCE_GROUP), and the node resource group (MC_\u003cAKSResourceGroup\u003e_\u003cAKSClusterName\u003e_\u003cAKSClusterLocation\u003e). The latter contains all of the infrastructure resources associated with the cluster like VM/VMSS and VNet. Depending on where you deploy your user-assigned identities, you might need additional role assignments. Please refer to Role Assignment for more information. For this demo, it is recommended to deploy the demo identity to your node resource group (the one with MC_ prefix).\n 1. Deploy aad-pod-identity Deploy aad-pod-identity components to an RBAC-enabled cluster:\nkubectl apply -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/deploy/infra/deployment-rbac.yaml # For AKS clusters, deploy the MIC and AKS add-on exception by running - kubectl apply -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/deploy/infra/mic-exception.yaml Deploy aad-pod-identity components to a non-RBAC cluster:\nkubectl apply -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/deploy/infra/deployment.yaml # For AKS clusters, deploy the MIC and AKS add-on exception by running - kubectl apply -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/deploy/infra/mic-exception.yaml Deploy aad-pod-identity using Helm 3:\nhelm repo add aad-pod-identity https://raw.githubusercontent.com/Azure/aad-pod-identity/master/charts helm install aad-pod-identity aad-pod-identity/aad-pod-identity For a list of overwritable values when installing with Helm, please refer to this section.\n Important: For AKS clusters with limited egress traffic, Please install aad-pod-identity in kube-system namespace using the helm charts.\n helm install aad-pod-identity aad-pod-identity/aad-pod-identity --namespace=kube-system 2. Create an identity on Azure Create an identity on Azure and store the client ID and resource ID of the identity as environment variables:\naz identity create -g ${IDENTITY_RESOURCE_GROUP} -n ${IDENTITY_NAME} export IDENTITY_CLIENT_ID=\"$(az identity show -g ${IDENTITY_RESOURCE_GROUP} -n ${IDENTITY_NAME} --query clientId -otsv)\" export IDENTITY_RESOURCE_ID=\"$(az identity show -g ${IDENTITY_RESOURCE_GROUP} -n ${IDENTITY_NAME} --query id -otsv)\" 3. Deploy AzureIdentity Create an AzureIdentity in your cluster that references the identity you created above:\ncat \u003c\u003cEOF | kubectl apply -f - apiVersion: \"aadpodidentity.k8s.io/v1\" kind: AzureIdentity metadata: name: ${IDENTITY_NAME} spec: type: 0 resourceID: ${IDENTITY_RESOURCE_ID} clientID: ${IDENTITY_CLIENT_ID} EOF  Set type: 0 for user-assigned MSI, type: 1 for Service Principal with client secret, or type: 2 for Service Principal with certificate. For more information, see here.\n 4. (Optional) Match pods in the namespace For matching pods in the namespace, please refer to the namespaced documentation.\n5. Deploy AzureIdentityBinding Create an AzureIdentityBinding that reference the AzureIdentity you created above:\ncat \u003c\u003cEOF | kubectl apply -f - apiVersion: \"aadpodidentity.k8s.io/v1\" kind: AzureIdentityBinding metadata: name: ${IDENTITY_NAME}-binding spec: azureIdentity: ${IDENTITY_NAME} selector: ${IDENTITY_NAME} EOF 6. Deployment and Validation For a pod to match an identity binding, it needs a label with the key aadpodidbinding whose value is that of the selector: field in the AzureIdentityBinding. Deploy a pod that validates the functionality:\ncat \u003c\u003c EOF | kubectl apply -f - apiVersion: v1 kind: Pod metadata: name: demo labels: aadpodidbinding: $IDENTITY_NAME spec: containers: - name: demo image: mcr.microsoft.com/oss/azure/aad-pod-identity/demo:v1.8.13 args: - --subscription-id=${SUBSCRIPTION_ID} - --resource-group=${IDENTITY_RESOURCE_GROUP} - --identity-client-id=${IDENTITY_CLIENT_ID} nodeSelector: kubernetes.io/os: linux EOF  mcr.microsoft.com/oss/azure/aad-pod-identity/demo is an image that demonstrates the use of AAD pod identity. The source code can be found here.\n To verify that the pod is indeed using the identity correctly:\nkubectl logs demo If successful, the log output would be similar to the following output:\nI0510 18:16:53.042124 1 main.go:128] curl -H Metadata:true \"http://169.254.169.254/metadata/instance?api-version=2017-08-01\": {\"compute\":{\"location\":\"westus2\",\"name\":\"aks-nodepool1-17529566-vmss_1\",\"offer\":\"aks\",\"osType\":\"Linux\",\"placementGroupId\":\"877d5750-2bed-43dd-bad6-62e4f3b58a3c\",\"platformFaultDomain\":\"0\",\"platformUpdateDomain\":\"1\",\"publisher\":\"microsoft-aks\",\"resourceGroupName\":\"MC_chuwon_chuwon_westus2\",\"sku\":\"aks-ubuntu-1804-gen2-2021-q1\",\"subscriptionId\":\"2d31b5ab-0ddc-4991-bf8d-61b6ad196f5a\",\"tags\":\"aksEngineVersion:v0.47.0-aks-gomod-b4-aks;creationSource:aks-aks-nodepool1-17529566-vmss;orchestrator:Kubernetes:1.18.14;poolName:nodepool1;resourceNameSuffix:17529566\",\"version\":\"2021.01.28\",\"vmId\":\"4fc9f60c-170c-4e76-84ff-81c6c0cecea1\",\"vmSize\":\"Standard_DS2_v2\"},\"network\":{\"interface\":[{\"ipv4\":{\"ipAddress\":[{\"privateIpAddress\":\"10.240.0.5\",\"publicIpAddress\":\"\"}],\"subnet\":[{\"address\":\"10.240.0.0\",\"prefix\":\"16\"}]},\"ipv6\":{\"ipAddress\":[]},\"macAddress\":\"000D3AFE98BF\"}]}}\rI0510 18:17:04.474588 1 main.go:100] successfully acquired a service principal token from http://169.254.169.254/metadata/identity/oauth2/token using a user-assigned identity (a9979fb6-6655-4612-95c9-7e4d0c83001b)\rI0510 18:17:04.474610 1 main.go:50] Try decoding your token \u003cJWT token\u003e at https://jwt.io\rOnce you are done with the demo, clean up your resources:\nkubectl delete pod demo kubectl delete azureidentity ${IDENTITY_NAME} kubectl delete azureidentitybinding ${IDENTITY_NAME}-binding az role assignment delete --id ${IDENTITY_ASSIGNMENT_ID} az identity delete -g ${IDENTITY_RESOURCE_GROUP} -n ${IDENTITY_NAME} Uninstall Notes The NMI pods modify the nodes' [iptables] to intercept calls to IMDS endpoint within a node. This allows NMI to insert identities assigned to a pod before executing the request on behalf of the caller.\nThese iptables entries will be cleaned up when the pod-identity pods are uninstalled. However, if the pods are terminated for unexpected reasons, the iptables entries can be removed with these commands on the node:\n# remove the custom chain reference iptables -t nat -D PREROUTING -j aad-metadata # flush the custom chain iptables -t nat -F aad-metadata # remove the custom chain iptables -t nat -X aad-metadata ","excerpt":"Run the following commands to set Azure-related environment variables …","ref":"/aad-pod-identity/docs/demo/standard_walkthrough/","title":"Standard Walkthrough"},{"body":" Examples apiVersion:\"aadpodidentity.k8s.io/v1\"kind:AzureIdentityBindingmetadata:name:\u003cAzureIdentityBindingName\u003espec:azureIdentity:\"\u003cAzureIdentityName\u003e\"selector:\"\u003cSelector\u003e\" AzureIdentityBinding    Field Description     apiVersion\nstring APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.   kind\nstring Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.   metadata\nObjectMeta Standard object’s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata   spec\nAzureIdentityBindingSpec Describes the specifications of an identity binding relationship between an AzureIdentity and pod(s).    AzureIdentityBindingSpec    Field Description     azureIdentity\nstring The name of the AzureIdentity that should be assigned to the pod(s) if matching selector is found.   selector\nstring The selector to identify which pods should be assigned to the AzureIdentity above. It will go through a list of pods and look for value of pod label with key aadpodidbinding that is equal to itself.    ","excerpt":" Examples …","ref":"/aad-pod-identity/docs/concepts/azureidentitybinding/","title":"AzureIdentityBinding"},{"body":"","excerpt":"","ref":"/aad-pod-identity/docs/concepts/","title":"Concepts"},{"body":"","excerpt":"","ref":"/aad-pod-identity/docs/demo/","title":"Demos"},{"body":"This tutorial is based on this repository.\nPrerequisites  Azure Account  In this tutorial we are going to be using the Azure CLI, bash scripts, and kubectl. There are three sections, and each section contains several scripts to run. You’ll find all the scripts in the tutorial directory.\nTo begin, clone this repository\ngit clone https://github.com/Azure/aad-pod-identity cd aad-pod-identity/tutorial Using Azure CLI, kubectl and bash The following steps require the Azure CLI, make sure to download and login before starting.\nIf you’re on Windows, you should use Windows Subsystem for Linux or another Bash terminal.\nYou can install kubectl via the Azure CLI, or by another method\naz aks install-cli\n1. Create a Kubernetes Cluster on Azure (AKS) 1.1. Register the required resource types ./1-init-aks/1-azure-provider-registration.sh\nAKS requires the following resources: Microsoft.Network, Microsoft.Storage, Microsoft.Compute, Microsoft.ContainerService. Register them on your subscription with the above script.\n1.2. Create a Resource Group Set an environment variable in your shell, for the name of your resource group.\nexport RG=\"k8s-test\"\nThis resource group is for your AKS cluster. Create it with this command.\n./1-init-aks/2-create-rg.sh\n1.3. Create Azure Kubernetes Service This will create an AKS instance in the resource group created above. It may take a couple of minutes to complete. Set the name of the this command in the shell.\nK8S_NAME=\"Cluster-Name\" ./1-init-aks/3-create-aks.sh 1.4. Configure the kubernetes CLI - kubectl With kubectl installed, run the following script\n./1-init-aks/4-configure-cli.sh\nNow the kubectl command should control your AKS cluster. Try it out, it should look similar to below:\n$ kubectl get nodes NAME STATUS ROLES AGE VERSION aks-nodepool1-15831963-0 Ready agent 01h v1.9.6 2. Configure AKS with required infrastructure on the cluster Pod Identity requires two components:\n Managed Identity Controller (MIC). A pod that binds Azure Ids to other pods - creates azureAssignedIdentity CRD. Node Managed Identity (NMI). Identifies the pod based on the remote address of the incoming request, and then queries the k8s (through MIC) for a matching Azure Id. It then make a adal request to get the token for the client id and returns as a response to the request. Implemented as a DaemonSet.  Deploy the infrastructure with the following command to deploy MIC, NMI, and MIC CRDs.\n./2-config-aks/2-deploy-infra.sh\nNOTE: If you have RBAC enabled, use the following deployment instead:\nkubectl create -f ../../deploy/infra/deployment-rbac.yaml\r3. Deploy the demo The demo is basic, but does prove the concept.\n3.1. Create an Azure Id We will be assigning the demo pod an Azure Managed Service Identity. The Azure Id will need to be in the same Resource Group as was created automatically by the provisioning of the AKS cluster see this issue for more information.\nYou might find the Resource Group name with\naz group list | grep $RG\nThen set the environment variable\nexport MC_RG=\"resource-group-name\"\nRun the following to create an azure id\n./3-deploy-demo/1-create-azure-id.sh\n3.2. Deploy demo The /deploy/demo/deployment.yaml describes the pod that will be deployed.\nIt automatically adds the following values from your environment:\n subscriptionid: Id of your Azure Subscription clientid: From the Azure Id you created in the step above resourcegroup: From the Azure Id you created above  Run the following to deploy the demo\n./3-deploy-demo/2-deploy-demo.sh\n3.3. Deploy Azure Id to Kubernetes We need to tell the cluster about the Id we created, so it can bind it to the pod (the next step). To do that, we will deploy the spec found in /deploy/demo/aadpodidentity.yaml.\nRun the following to deploy the Azure ID to Kubernetes:\n./3-deploy-demo/3-deploy-id-to-k8s.sh\n3.4. Bind the Id to our demo pod Last thing we need to do is bind the Id we created in step 1, and deployed in step 3, to the pod we deployed in step 2.\nDeploy the binding with the following\n./3-deploy-demo/4-deploy-id-binding.sh\nDid it work? You’ll need to check the logs of each pod to know if everything worked.\nFirst, get the pod names with the following command:\n$ kubectl get pods NAME READY STATUS RESTARTS AGE demo-757967c54-64pzr 1/1 Running 0 1h # the demo pod mic-64ddcf5f65-h4hft 1/1 Running 0 19h # the MIC pod nmi-b9xbg 1/1 Running 0 1h # the NMI pod Check the Managed Identity Controller pod Check the logs of the MIC controller and see the binding successfully applied on the node.\n$ kubectl logs mic-64ddcf5f65-h4hft .... I0606 23:19:45.867711 1 crd.go:123] Got id podid to assign I0606 23:19:45.867829 1 crd.go:142] Creating assigned Id: demo-5788d95785-ghzwv-default-podid I0606 23:19:45.874002 1 cloudprovider.go:170] Find aks-nodepool1-15831963-0 in resource group: MC_k8s-test_clusterFrank_eastus I0606 23:20:11.051552 1 cloudprovider.go:162] Underlying cloud provider operation took 25.04421296s I0606 23:20:11.051846 1 mic.go:259] Sync took: 25.220821436s I0606 23:20:11.052905 1 event.go:218] Event(v1.ObjectReference{Kind:\"AzureIdentityBinding\", Namespace:\"default\", Name:\"myIdBinding\", UID:\"19a07e0e-69e0-11e8-9e9f-4addade2df92\", APIVersion:\"aadpodidentity.k8s.io/v1\", ResourceVersion:\"89529\", FieldPath:\"\"}): type: 'Normal' reason: 'binding applied' Binding myIdBinding applied on node aks-nodepool1-15831963-0 for pod demo-5788d95785-ghzwv-default-podid Check the Node Managed Identity pod Check the logs of the NMI pod to see only info level logging and 200 responses. If you see 403 or 404 responses, then something is wrong.\n$ kubectl logs nmi-b9xbg ... time=\"2018-06-07T01:30:04Z\" level=info msg=\"Status (200) took 55422159 ns\" req.method=GET req.path=/metadata/identity/oauth2/token req.remote=10.244.0.25 time=\"2018-06-07T01:30:04Z\" level=info msg=\"matched identityType:0 clientid:a40e83f9-6198-4633-afae-d860eb5b7f7c resource:https://management.azure.com/\" req.method=GET req.path=/metadata/identity/oauth2/token req.remote=10.244.0.25 Check the demo pod The demo pod should be reporting on the virtual machines in the resource group. If you see intermittant 403 responses, that is OK.\n$ kubectl logs demo-757967c54-64pzr ... time=\"2018-06-07T01:32:30Z\" level=error msg=\"failed list all vm compute.VirtualMachinesClient#List: Failure responding to request: StatusCode=403 -- Original Error: autorest/azure: Service returned an error. Status=403 Code=\\\"AuthorizationFailed\\\" Message=\\\"The client '48affddb-9972-4b7e-a82b-c5d32d2a3dd5' with object id '48affddb-9972-4b7e-a82b-c5d32d2a3dd5' does not have authorization to perform action 'Microsoft.Compute/virtualMachines/read' over scope '/subscriptions/c5760548-23c2-4223-b41e-5d68a8320a0c/resourceGroups/MC_k8s-test_clusterFrank_eastus/providers/Microsoft.Compute'.\\\"\" podip=10.244.0.25 podname=demo-757967c54-64pzr podnamespace=demo-757967c54-64pzr time=\"2018-06-07T01:32:30Z\" level=info msg=\"successfully acquired a token using the MSI, msiEndpoint(http://169.254.169.254/metadata/identity/oauth2/token)\" podip=10.244.0.25 podname=demo-757967c54-64pzr podnamespace=demo-757967c54-64pzr time=\"2018-06-07T01:32:30Z\" level=info msg=\"successfully acquired a token, userAssignedID MSI, msiEndpoint(http://169.254.169.254/metadata/identity/oauth2/token) clientID(a40e83f9-6198-4633-afae-d860eb5b7f7c)\" podip=10.244.0.25 podname=demo-757967c54-64pzr podnamespace=demo-757967c54-64pzr time=\"2018-06-07T01:32:30Z\" level=info msg=\"successfully made GET on instance metadata, {\\\"compute\\\":{\\\"location\\\":\\\"eastus\\\",\\\"name\\\":\\\"aks-nodepool1-15831963-0\\\",\\\"offer\\\":\\\"UbuntuServer\\\",\\\"osType\\\":\\\"Linux\\\",\\\"placementGroupId\\\":\\\"\\\",\\\"platformFaultDomain\\\":\\\"0\\\",\\\"platformUpdateDomain\\\":\\\"0\\\",\\\"publisher\\\":\\\"Canonical\\\",\\\"resourceGroupName\\\":\\\"MC_k8s-test_clusterFrank_eastus\\\",\\\"sku\\\":\\\"16.04-LTS\\\",\\\"subscriptionId\\\":\\\"c5760548-23c2-4223-b41e-5d68a8320a0c\\\",\\\"tags\\\":\\\"acsengineVersion:v0.17.0-aks;creationSource:aks-aks-nodepool1-15831963-0;orchestrator:Kubernetes:1.9.6;poolName:nodepool1;resourceNameSuffix:15831963\\\",\\\"version\\\":\\\"16.04.201805090\\\",\\\"vmId\\\":\\\"3fea4c7e-4aaf-400f-a588-2a851f6fd0cf\\\",\\\"vmSize\\\":\\\"Standard_DS1_v2\\\"},\\\"network\\\":{\\\"interface\\\":[{\\\"ipv4\\\":{\\\"ipAddress\\\":[{\\\"privateIpAddress\\\":\\\"10.240.0.4\\\",\\\"publicIpAddress\\\":\\\"\\\"}],\\\"subnet\\\":[{\\\"address\\\":\\\"10.240.0.0\\\",\\\"prefix\\\":\\\"16\\\"}]},\\\"ipv6\\\":{\\\"ipAddress\\\":[]},\\\"macAddress\\\":\\\"000D3A13DEE3\\\"}]}}\" podip=10.244.0.25 podname=demo-757967c54-64pzr podnamespace=demo-757967c54-64pzr Check the descriptions kubectl describe azureidentity\nkubectl describe azureidentitybinding\nAAD Pod Identity In Action \n","excerpt":"This tutorial is based on this repository.\nPrerequisites  Azure …","ref":"/aad-pod-identity/docs/demo/tutorial/","title":"AAD Pod Identity Tutorial"},{"body":" Starting from 1.7 release\n Introduction AAD Pod Identity is disabled by default on clusters with Kubenet network plugin. The NMI pods will fail to run with error AAD Pod Identity is not supported for Kubenet.\nWhy this change? Kubenet network plugin is susceptible to ARP spoofing. This makes it possible for pods to impersonate as a pod with access to an identity. Using CAP_NET_RAW capability the attacker pod could then request token as a pod it’s impersonating.\nNetwork plugins like Azure CNI, Calico, Cilium prevents ARP Spoofing.\nMitigation steps to take before running clusters with Kubenet The recommended steps to take before configuring AAD Pod Identity to run on clusters with Kubenet network plugin\n  Add a securityContext that drops the NET_RAW capability by default in your applications.\nsecurityContext:capabilities:drop:- NET_RAWThis shouldn’t affect most applications, since it’s only needed for applications that do deep networking inspection/manipulation. Dropping this capability will make sure even if your application code got compromised, the attacker could not perform such network-based attacks on your cluster.\n  How to run AAD Pod Identity on clusters with Kubenet Warning Running aad-pod-identity in a cluster with Kubenet is not a recommended configuration because of the security implication. Please follow the mitigation steps and configure policies before enabling aad-pod-identity in a cluster with Kubenet.  Set the --allow-network-plugin-kubenet=true arg in the NMI container (or --set nmi.allowNetworkPluginKubenet=true if deploying with Helm) to continue running on clusters with Kubenet.\nTo mitigate the vulnerability at the cluster level, you can use OpenPolicyAgent admission controller together with Gatekeeper validating webhook.\nProvided you have Gatekeeper already installed in your cluster, add the ConstraintTemplate of type K8sPSPCapabilities:\nkubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/capabilities/template.yaml Add a template to limit the spawning of Pods with the NET_RAW capability:\napiVersion:constraints.gatekeeper.sh/v1beta1kind:K8sPSPCapabilitiesmetadata:name:prevent-net-rawspec:match:kinds:- apiGroups:[\"\"]kinds:[\"Pod\"]excludedNamespaces:- \"kube-system\"parameters:requiredDropCapabilities:[\"NET_RAW\"]You can either exclude specific namespaces like in the example above or explicitly include namespaces with spec.match.namespaces.\n","excerpt":" Starting from 1.7 release\n Introduction AAD Pod Identity is disabled …","ref":"/aad-pod-identity/docs/configure/aad_pod_identity_on_kubenet/","title":"Deploy AAD Pod Identity in a Cluster with Kubenet"},{"body":" Available from 1.5 release\n The why Goal: To enable user to use a separate service principal (aad-pod-identity admin service principal) other than the cluster service principal and to move away from /etc/kubernetes/azure.json.\nUsers now have the option to deploy aad-pod-identity with a separate service principal which is together with its secret and other configurations stored in a Kubernetes secret object.\nPermissions The permission of the admin service principal needs to be ‘Contributor’ role over the scope of node resource group starting with “MC_”.\nCreate a new service principal with the permission:\naz ad sp create-for-rbac -n \"\u003csp_name\u003e\" --role \"Contributor\" --scopes \"/subscriptions/\u003csubscription-id\u003e/resourceGroups/\u003cMC_node_resource_group\u003e\"  Note the appId (client id), password (secret) and tenant from the resulting json, which will be used in creating the admin secret.\n Or assign the permission for an existing service principal:\naz role assignment create --role \"Contributor\" --assignee \u003csp_id\u003e --scope \"/subscriptions/\u003csubscription-id\u003e/resourceGroups/\u003cMC_node_resource_group\u003e\" For any subsequent user assigned managed identity that’s intended for a pod, it’s also required to grant the service principal ‘Managed Identity Operator’ permission (also stated here):\naz role assignment create --role \"Managed Identity Operator\" --assignee \u003csp_id\u003e --scope \u003cresource id of the managed identity\u003e Create the admin secret The aadpodidentity-admin-secret contains the following fields:\n Cloud: \u003cbase64-encoded-cloud\u003e  ‘Cloud’ should be chosen from the following case-insensitive values: AzurePublicCloud, AzureUSGovernmentCloud, AzureChinaCloud, AzureGermanCloud (values taken from here).   SubscriptionID: \u003cbase64-encoded-subscription-id\u003e ResourceGroup: \u003cbase64-encoded-resource-group\u003e  ‘ResourceGroup’ is the node resource group where the actual virtual machines or virtual machine scale set resides.   VMType: \u003cbase64-encoded-vm-type\u003e  ‘VMType’ is optional and can be one of these values: standard for normal virtual machine nodes, and vmss for cluster deployed with a virtual machine scale set.   TenantID: \u003cbase64-encoded-tenant-id\u003e ClientID: \u003cbase64-encoded-client-id\u003e ClientSecret: \u003cbase64-encoded-client-secret\u003e  ‘TenantID’, ‘ClientID’ and ‘ClientSecret’ are service principal’s tenant, appId, password respectively.     Use echo -n 'secret-content' | base64 to create a base64 encoded string.\n Fill out those secret values in the /deploy/infra/noazurejson/deployment.yaml or /deploy/infra/noazurejson/deployment-rbac.yaml before executing kubectl create -f ./deploy/infra/noazurejson/deployment.yaml or kubectl create -f ./deploy/infra/noazurejson/deployment-rbac.yaml.\n Note that if not use the above yaml’s, aadpodidentity-admin-secret must be created before deploying mic and mic must reference the secret as shown in the yaml’s.\n The secret will be injected as an environment variable into mic upon pod creation and cannot be updated during the lifecycle of mic. However, redeploying mic should pick up the updated service principal’s information should they change.\n","excerpt":" Available from 1.5 release\n The why Goal: To enable user to use a …","ref":"/aad-pod-identity/docs/configure/deploy_aad_pod_dedicated_sp/","title":"Deploy AAD Pod Identity with a Dedicated Service Principal"},{"body":"Quick Install To install/upgrade AAD Pod Identity on RBAC-enabled clusters:\nkubectl apply -f https://raw.githubusercontent.com/Azure/aad-pod-identity/v1.8.13/deploy/infra/deployment-rbac.yaml  Result serviceaccount/aad-pod-id-nmi-service-account created customresourcedefinition.apiextensions.k8s.io/azureassignedidentities.aadpodidentity.k8s.io created customresourcedefinition.apiextensions.k8s.io/azureidentitybindings.aadpodidentity.k8s.io created customresourcedefinition.apiextensions.k8s.io/azureidentities.aadpodidentity.k8s.io created customresourcedefinition.apiextensions.k8s.io/azurepodidentityexceptions.aadpodidentity.k8s.io created clusterrole.rbac.authorization.k8s.io/aad-pod-id-nmi-role created clusterrolebinding.rbac.authorization.k8s.io/aad-pod-id-nmi-binding created daemonset.apps/nmi created serviceaccount/aad-pod-id-mic-service-account created clusterrole.rbac.authorization.k8s.io/aad-pod-id-mic-role created clusterrolebinding.rbac.authorization.k8s.io/aad-pod-id-mic-binding created deployment.apps/mic created  To install/upgrade aad-pod-identity on RBAC-disabled clusters:\nkubectl apply -f https://raw.githubusercontent.com/Azure/aad-pod-identity/v1.8.13/deploy/infra/deployment.yaml  Result customresourcedefinition.apiextensions.k8s.io/azureassignedidentities.aadpodidentity.k8s.io created customresourcedefinition.apiextensions.k8s.io/azureidentitybindings.aadpodidentity.k8s.io created customresourcedefinition.apiextensions.k8s.io/azureidentities.aadpodidentity.k8s.io created customresourcedefinition.apiextensions.k8s.io/azurepodidentityexceptions.aadpodidentity.k8s.io created daemonset.apps/nmi created deployment.apps/mic created  For AKS clusters, you will have to allow MIC and AKS add-ons to access IMDS without being intercepted by NMI:\nkubectl apply -f https://raw.githubusercontent.com/Azure/aad-pod-identity/v1.8.13/deploy/infra/mic-exception.yaml  Warning failure to apply mic-exception.yaml in AKS clusters will result in token failures for AKS addons using managed identity for authentication.   Result azurepodidentityexception.aadpodidentity.k8s.io/mic-exception created azurepodidentityexception.aadpodidentity.k8s.io/aks-addon-exception created  Helm AAD Pod Identity allows users to customize their installation via Helm.\nhelm repo add aad-pod-identity https://raw.githubusercontent.com/Azure/aad-pod-identity/master/charts helm install aad-pod-identity aad-pod-identity/aad-pod-identity Values For a list of customizable values that can be injected when invoking helm install, please see the Helm chart configurations.\n","excerpt":"Quick Install To install/upgrade AAD Pod Identity on RBAC-enabled …","ref":"/aad-pod-identity/docs/getting-started/installation/","title":"Installation"},{"body":"Installation Standard mode The MIC component by default relies on /etc/kubernetes/azure.json to get cluster configuration and credentials. Since the /etc/kubernetes/azure.json doesn’t exist in ARO clusters, the AAD Pod Identity components will need to be deployed with a dedicated SP/managed identity to provide access to Azure.\nHelm helm repo add aad-pod-identity https://raw.githubusercontent.com/Azure/aad-pod-identity/master/charts # Helm 3 # If using managed identity to provide MIC access to Azure, then set adminsecret.clientID=msi and adminsecret.clientSecret=msi # Set adminsecret.useMSI=false if using service principal to provide MIC access to Azure helm install aad-pod-identity aad-pod-identity/aad-pod-identity \\  --set adminsecret.cloud=\u003cazure cloud name\u003e \\  --set adminsecret.subscriptionID=\u003csubscription id\u003e \\  --set adminsecret.resourceGroup=\u003cnode resource group\u003e \\  --set adminsecret.vmType=vmss \\  --set adminsecret.tenantID=\u003ctenant id\u003e \\  --set adminsecret.clientID=\u003cservice principal clientID\u003e \\  --set adminsecret.clientSecret=\u003cservice principal clientSecret\u003e \\  --set-string adminsecret.useMSI=false \\  --set adminsecret.userAssignedMSIClientID=\u003cClientID from identity\u003e Using deployment yamls If deploying using deployment yamls, refer to the doc here.\nManaged mode Follow the docs here on how to install AAD Pod Identity in managed mode.\nValidate pod identity components are running  If deploying in standard mode, check the MIC pods are up and running. Check if NMI is running on all nodes. Follow the doc here to ensure the iptables rules exist.  ","excerpt":"Installation Standard mode The MIC component by default relies on …","ref":"/aad-pod-identity/docs/configure/deploy_in_openshift/","title":"Setup AAD Pod Identity on Azure RedHat OpenShift (ARO)"},{"body":"Prerequisites  an AKS cluster with managed identity enabled AAD Pod Identity installed and configured Azure Container Registry Azure Storage  Make sure you have already created a container    Setup Create a Managed Identity and Assign Roles In this step, we’ll create a new user-assigned identity which will be used to interact with the Azure Storage account.\n this step can be skipped if you already have a managed identity you’d like to reuse.\n   Setup:\ngit clone https://github.com/Azure/aad-pod-identity $GOPATH/src/github.com/Azure/aad-pod-identity cd $GOPATH/src/github.com/Azure/aad-pod-identity/examples/java-blob CLUSTER_NAME=\u003cYOUR_AKS_CLUSTER_NAME\u003e CLUSTER_RESOURCE_GROUP=$(az aks list --query \"[?name == '$CLUSTER_NAME'].resourceGroup\" -o tsv) IDENTITY_NAME=\u003cYOUR_IDENTITY_NAME\u003e IDENTITY_RESOURCE_GROUP=$(az aks show -g $CLUSTER_RESOURCE_GROUP -n $CLUSTER_NAME --query nodeResourceGroup -otsv) STORAGE_ACCOUNT_NAME=\u003cSTORAGE_ACCOUNT_NAME\u003e STORAGE_ACCOUNT_RESOURCE_GROUP=$(az storage account list --query \"[?name == '$STORAGE_ACCOUNT_NAME'].resourceGroup\" -o tsv) CLUSTER_MSI_CLIENT_ID=$(az aks show \\  -n $CLUSTER_NAME \\  -g $CLUSTER_RESOURCE_GROUP \\  --query \"identityProfile.kubeletidentity.clientId\" \\  -o tsv) STORAGE_ACCOUNT_RESOURCE_ID=$(az storage account show \\  --name $STORAGE_ACCOUNT_NAME \\  --query 'id' -o tsv)   Create a managed identity:\nIDENTITY_RESOURCE_ID=$(az identity create \\  --name $IDENTITY_NAME \\  --resource-group $IDENTITY_RESOURCE_GROUP \\  --query 'id' -o tsv) IDENTITY_CLIENT_ID=$(az identity show \\  -n $IDENTITY_NAME \\  -g $IDENTITY_RESOURCE_GROUP \\  --query 'clientId' -o tsv)   Assign role to allow AAD Pod Identity to access our newly created managed identity:\naz role assignment create \\  --role \"Managed Identity Operator\" \\  --assignee $CLUSTER_MSI_CLIENT_ID \\  --scope $IDENTITY_RESOURCE_ID   Grant permission to specific storage container in the Azure Storage Account:\nCONTAINER=test az role assignment create \\  --role \"Storage Blob Data Contributor\" \\  --assignee $IDENTITY_CLIENT_ID \\  --scope \"$STORAGE_ACCOUNT_RESOURCE_ID/blobServices/default/containers/$CONTAINER\"    if you want the managed identity to access your entire Storage Account, you can ignore /blobServices/default/containers/$CONTAINER.\n Configure AAD Pod Identity The following step will create a new AzureIdentity resource in Kubernetes in the blob namespace. If your namespace is something different then change NAMESPACE to match the namespace you want to deploy into.\nNAMESPACE=blob kubectl create namespace $NAMESPACE cat \u003c\u003c EOF | kubectl apply -f - apiVersion: \"aadpodidentity.k8s.io/v1\" kind: AzureIdentity metadata: name: $IDENTITY_NAME namespace: $NAMESPACE spec: type: 0 resourceID: $IDENTITY_RESOURCE_ID clientID: $IDENTITY_CLIENT_ID EOF Now we’ll create the AzureIdentityBinding and specify the selector.\nPOD_LABEL_SELECTOR=$IDENTITY_NAME cat \u003c\u003c EOF | kubectl apply -f - apiVersion: aadpodidentity.k8s.io/v1 kind: AzureIdentityBinding metadata: name: $IDENTITY_NAME-binding namespace: $NAMESPACE spec: azureIdentity: $IDENTITY_NAME selector: $POD_LABEL_SELECTOR EOF Build In the root of this project contains a Dockerfile. All you need to do is build the container and push to Azure Container Registry.\nACR=\u003cYOUR_ACR\u003e IMG=$ACR.azurecr.io/azure-storage-example:1 az acr login --name $ACR docker build -t $IMG . docker push $IMG Deploy cat \u003c\u003c EOF | kubectl apply -f - apiVersion: apps/v1 kind: Deployment metadata: name: demo-blob-deployment namespace: $NAMESPACE spec: replicas: 1 selector: matchLabels: name: demo-blob template: metadata: name: demo-blob labels: name: demo-blob aadpodidbinding: $POD_LABEL_SELECTOR spec: containers: - name: demo-blob image: $IMG env: - name: AZURE_CLIENT_ID value: $IDENTITY_CLIENT_ID - name: BLOB_ACCOUNT_NAME value: $STORAGE_ACCOUNT_NAME - name: BLOB_CONTAINER_NAME value: $CONTAINER nodeSelector: kubernetes.io/os: linux --- apiVersion: v1 kind: Service metadata: name: demo-blob-service namespace: $NAMESPACE spec: type: NodePort selector: name: demo-blob ports: - port: 8080 targetPort: 8080 EOF Test To interact with the demo-blob pod running in AKS, we first need a pod with cURL installed. The following command create a new pod called curl using the curlimages/curl image, and then execute into the pod.\nkubectl run curl --rm -i --tty --image=curlimages/curl:7.73.0 -n blob -- sh Once you have access into the curl pod, run the following command to upload a new blob into the Azure Storage Account:\ncurl -d 'new message' -H 'Content-Type: text/plain' demo-blob-service:8080/ Assuming everything works, this will create a new .txt file the container created earlier with the text new message.\nYou should receive the following message:\nfile quickstart-8fea77d9-d133-4cb1-8f16-391dc8e4e3f7.txt was uploaded To retrieve the contents of the blob, assuming the file was saved under quickstart-8fea77d9-d133-4cb1-8f16-391dc8e4e3f7.txt, make the following GET request:\ncurl -X GET http://demo-blob-service:8080/?fileName=quickstart-8fea77d9-d133-4cb1-8f16-391dc8e4e3f7.txt You should get back the following:\nnew message ","excerpt":"Prerequisites  an AKS cluster with managed identity enabled AAD Pod …","ref":"/aad-pod-identity/docs/demo/java-blob/","title":"Spring Boot + Azure Storage + AAD Pod Identity"},{"body":" Note: the lifecycle of AzureAssignedIdentity is fully managed by MIC. Users should not manually modify the fields.\n AzureAssignedIdentity    Field Description     apiVersion\nstring APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.   kind\nstring Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.   metadata\nObjectMeta Standard object’s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata   spec\nAzureAssignedIdentitySpec Describes the current state of identity binding relationship between an AzureIdentity and a pod.    AzureAssignedIdentitySpec    Field Description     azureIdentityRef\nAzureIdentity The AzureIdentity that is bound to the pod.   azureBindingRef\nAzureIdentityBinding The AzureIdentityBinding that is binding the AzureIdentity and the pod together.   pod\nstring The name of the pod that is bound to the AzureIdentity.   podNamespace\nstring The namespace of the pod that is bound to the AzureIdentity.   nodename\nstring The name of the node that the pod is scheduled to.    ","excerpt":" Note: the lifecycle of AzureAssignedIdentity is fully managed by MIC. …","ref":"/aad-pod-identity/docs/concepts/azureassignedidentity/","title":"AzureAssignedIdentity"},{"body":" Available from 1.5 release\n NMI pods modify the nodes' iptables to intercept calls to Azure Instance Metadata endpoint. This means any request that’s made to the Metadata endpoint will be intercepted by NMI even if the pod doesn’t use aad-pod-identity. AzurePodIdentityException CRD can be configured to inform aad-pod-identity that any requests to metadata endpoint originating from a pod that matches labels defined in CRD should be proxied without any processing in NMI. NMI will proxy the request to the metdata endpoint and return the token back as is without any validation.\n Create the AzurePodIdentityException with the same label that will be defined in the pod -  apiVersion:\"aadpodidentity.k8s.io/v1\"kind:AzurePodIdentityExceptionmetadata:name:test-exceptionspec:podLabels:foo:barapp:customUse the sample template, replace the podLabels with a list of desired values and then create the resource on the cluster:\nkubectl apply -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/examples/azurepodidentityexception.yaml When creating application pods that will not be using aad-pod-identity for calls to Azure Instance Metadata endpoint, include at least one of the labels in spec.template.metadata.labels.\nExample pod with same label as above defined in the spec -\napiVersion:apps/v1kind:Deploymentmetadata:name:samplelabels:app:samplespec:replicas:2selector:matchLabels:app:sampletemplate:metadata:labels:app:samplefoo:bar \u003c------- Label defined in exception CRD included in deploymentspec:[...]To verify the pods have the right label that match the ones defined in the exception crd -\nkubectl get pods --show-labels NAME READY STATUS RESTARTS AGE LABELS sample-td 1/1 Running 0 16s app=sample,foo=bar NOTE\n AzurePodIdentityException is per namespace. This means if the same label needs to be used in multiple namespaces to except pods, a CRD resource needs to be created in each namespace. All the labels defined in the exception CRD doesn’t need to be defined in the deployment/pod spec. A single match is enough for the pod to be excepted.  ","excerpt":" Available from 1.5 release\n NMI pods modify the nodes' iptables to …","ref":"/aad-pod-identity/docs/configure/application_exception/","title":"Disable AAD Pod Identity for a specific Pod/Application"},{"body":"","excerpt":"","ref":"/aad-pod-identity/docs/demo/quickstart/","title":"Quickstart Demo"},{"body":" Examples apiVersion:\"aadpodidentity.k8s.io/v1\"kind:AzurePodIdentityExceptionmetadata:name:aks-addon-exceptionnamespace:kube-systemspec:podLabels:kubernetes.azure.com/managedby:aks AzurePodIdentityException    Field Description     apiVersion\nstring APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.   kind\nstring Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.   metadata\nObjectMeta Standard object’s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata   spec\nAzurePodIdentityExceptionSpec Describes the specifications of which pods are allowed to access IMDS without being intercepted by NMI.    AzurePodIdentityExceptionSpec    Field Description     podLabels\nmap[string]string Pods with matching labels will bypass NMI validation.    ","excerpt":" Examples …","ref":"/aad-pod-identity/docs/concepts/azurepodidentityexception/","title":"AzurePodIdentityException"},{"body":"","excerpt":"","ref":"/aad-pod-identity/docs/configure/","title":"Configurations"},{"body":"Introduction This will help validate various CRDs and the azure resources used in aad-pod-identity. Currently validation of User assigned MSI format in Azure Identity is supported.\nGatekeeper - Policy Controller for Kubernetes, is used to validate the resources.\n It is a validating webhook that enforces CRD based policies Provides admission system which allows to configure policy and rule as constraint  Prerequisite Gatekeeper Installation Run the following to deploy a release version of Gatekeeper in your cluster or refer to Gatekeeper Installation for detailed instructions.\nkubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/master/deploy/gatekeeper.yaml Azure Identity Format Validation Policy can be configured as Gatekeeper constraint to ensure the validity of the Resource ID format in the given identity.Request will be rejected by admission controller in case of any violation of the configured constraint.\nFollowing are the two major resources to enable this check.\n Constraint Template Constraint  Constraint Template ConstraintTemplate describes both the Rego that enforces the constraint and the schema of the constraint.\n User assigned MSI is expected to have Resource ID in the given format.  /subscriptions/\u003csubid\u003e/resourcegroups/\u003cresourcegroup\u003e/providers/Microsoft.ManagedIdentity/userAssignedIdentities/\u003cname\u003e\rThe same can be validate using the following regex pattern. Resource ID that does not match this pattern is considered invalid.\n(?i)/subscriptions/(.+?)/resourcegroups/(.+?)/providers/Microsoft.ManagedIdentity/(.+?)/(.+)\r Policy to ensure Resource ID is following expected pattern can be described via following Constraint template  apiVersion:templates.gatekeeper.sh/v1beta1kind:ConstraintTemplatemetadata:name:azureidentityformatspec:crd:spec:names:kind:azureidentityformattargets:- target:admission.k8s.gatekeeper.shrego:| package azureidentityformat violation[{\"msg\": msg}] { input.review.kind.kind == \"AzureIdentity\" # format of resourceId is checked only for user-assigned MSI input.review.object.spec.type == 0 resourceId := input.review.object.spec.resourceID result := re_match(`(?i)/subscriptions/(.+?)/resourcegroups/(.+?)/providers/Microsoft.ManagedIdentity/(.+?)/(.+)`,resourceId) result == false msg := sprintf(`The identity resourceId '%v' is invalid.It must be of the following format: '/subscriptions/\u003csubid\u003e/resourcegroups/\u003cresourcegroup\u003e/providers/Microsoft.ManagedIdentity/userAssignedIdentities/\u003cname\u003e'`,[resourceId]) } You can install this ConstraintTemplate with the following command:\nkubectl apply -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/validation/gatekeeper/azureidentityformat_template.yaml Constraint Constraint is used to inform Gatekeeper that the admin wants azureidentityformat ConstraintTemplate to be enforced.\nIf the constraint is violated by any request on Kind AzureIdentity in apiGroup aadpodidentity.k8s.io, request will be rejected via the admission controller.\napiVersion:constraints.gatekeeper.sh/v1beta1kind:azureidentityformatmetadata:name:azureidentityformatconstraintspec:match:kinds:- apiGroups:[\"aadpodidentity.k8s.io\"]kinds:[\"AzureIdentity\"]You can install this Constraint with the following command:\nkubectl apply -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/validation/gatekeeper/azureidentityformat_constraint.yaml Examples  Following identity will pass the constraint and request will be accepted, as the resource ID is in the correct format.  apiVersion:\"aadpodidentity.k8s.io/v1\"kind:AzureIdentitymetadata:name:testidentityvalidspec:type:0resourceID:/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testidentityclientID:00000000-0000-0000-0000-000000000000 Following identity will violate the constraint and request will be rejected, as resource ID is not of correct format (resourcegroups/\u003cresourcegroup\u003e is missing in resourceID).  apiVersion:\"aadpodidentity.k8s.io/v1\"kind:AzureIdentitymetadata:name:testidentityinvalidspec:type:0resourceID:/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myidentityclientID:00000000-0000-0000-0000-000000000000kubectl apply -f aadpodidentity_test_invalid.yaml Error from server ([denied by azureidentityformatconstraint] The identity resourceId '/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myidentity' is invalid.It must be of the following format: '/subscriptions/\u003csubid\u003e/resourcegroups/\u003cresourcegroup\u003e/providers/Microsoft.ManagedIdentity/userAssignedIdentities/\u003cname\u003e'): error when creating \"aadpodidentity_test_invalid.yaml\": admission webhook \"validation.gatekeeper.sh\" denied the request: [denied by azureidentityformatconstraint] The identity resourceId '/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myidentity' is invalid.It must be of the following format: '/subscriptions/\u003csubid\u003e/resourcegroups/\u003cresourcegroup\u003e/providers/Microsoft.ManagedIdentity/userAssignedIdentities/\u003cname\u003e' Uninstallation Uninstall Constraint Template \u0026 Constraint  Delete instances of the constraint resource Delete the ConstraintTemplate` resource  Run the following to uninstall / disable validation.\nkubectl delete -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/validation/gatekeeper/azureidentityformat_constraint.yaml kubectl delete -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/validation/gatekeeper/azureidentityformat_template.yaml ","excerpt":"Introduction This will help validate various CRDs and the azure …","ref":"/aad-pod-identity/docs/configure/azure_identity_validation/","title":"Azure Identity Validation using Gatekeeper"},{"body":"Retry on token retrieval aad-pod-identity retrieves access tokens on behalf of your workload by intercepting token requests to the Instance Metadata Service (IMDS) endpoint (169.254.169.254). However, it does not perform any sort of token caching. We believe that either the users or the SDK that your application is using is responsible for token management.\nNote that there is a brief window between when your application started running and the identity gets assigned to the underlying node. If your application tried to retrieve an access token during that period, it might fail. The following table describes the duration that you could expect to wait based on your cluster’s node type:\n   Node Type Identity Assignment Duration     Virtual Machine 10 - 20 seconds   Virtual Machine Scale Set 40 - 60 seconds     Note: the delay only occurs when the user-assigned identity is not assigned to the underlying node on Azure. Subsequent token requests will not incur this delay after identity assignment.\n By default, when fetching an access token, NMI performs 16 retries with 5 seconds in between each retry to check whether the AzureIdentity assigned to your pod has been successfully assigned to the underlying node on Azure. It will return an error if it is still not assigned after 16 retries x 5 seconds = 80 seconds. Also, your workload might encounter an error if it times out before NMI finishes this operation. You can adjust the number of retries and the delay in between each retry via the NMI flags --retry-attempts-for-created and --find-identity-retry-interval.\nAdditional retry logic is also implemented internally in most of Azure’s SDKs to prevent your application from erroring out. For example, azure-sdk-for-go by default performs five retries with exponential backoff when fetching an access token from IMDS.\nAlternatively, you could set up a simple init container to probe for successful identity assignment by MIC and prevent applications from starting prematurely. Here is an example init-container with Azure CLI.\n...initContainers:- name:initimage:mcr.microsoft.com/azure-clicommand:- sh- -c- az login --identity --allow-no-subscriptions --debug...A pod using multiple AzureIdentities In some scenarios, you might want to assign multiple AzureIdentities to a workload. Here is an example of how to achieve that:\nAzureIdentities apiVersion:aadpodidentity.k8s.io/v1kind:AzureIdentitymetadata:name:az-id-1spec:type:0resourceID:\u003cResourceID of az-id-1\u003eclientID:\u003cClientID of az-id-1\u003eapiVersion:aadpodidentity.k8s.io/v1kind:AzureIdentitymetadata:name:az-id-2spec:type:0resourceID:\u003cResourceID of az-id-2\u003eclientID:\u003cClientID of az-id-2\u003eAzureIdentityBinding apiVersion:aadpodidentity.k8s.io/v1kind:AzureIdentityBindingmetadata:name:az-id-1-bindingspec:azureIdentity:az-id-1selector:az-id-combinedapiVersion:aadpodidentity.k8s.io/v1kind:AzureIdentityBindingmetadata:name:az-id-2-bindingspec:azureIdentity:az-id-2selector:az-id-combinedPod apiVersion:v1kind:Podmetadata:name:demolabels:aadpodidbinding:az-id-combined...Note: if you do not specify which managed identity to use (e.g. az login -i) then one of the managed identities matching the aadpodidbinding selector will be selected at random. To make sure the right managed identity is used for a particular workload, make sure you specify the managed identity’s clientId (e.g. az login -i -u \u003cCLIENT ID\u003e) or resourceID (e.g az login -i -u \u003cRESOURCE ID\u003e) when authenticating.\nPods using unauthorized AzureIdentities By default, aad-pod-identity matches pods with AzureIdentities across all namespaces. That means that a malicious pod could assign itself an unauthorized pod identity label and acquire a token with that particular AzureIdentity. This scenario can be mitigated by performing the following:\n  Deploy aad-pod-identity with namespaced mode. This will restrict pods from binding with AzureIdentities across different namespaces. Note that AzureIdentities and AzureIdentityBindings must be deployed to the same namespace as your workload when using namespaced mode.\n  Set up Kubernetes-native RBAC to restrict access and creation of AzureIdentities across sensitive namespaces.\n  Set up RBAC on Azure to restrict access and creation of user-assigned identities.\n  Using aad-pod-identity in different Kubernetes workloads Deployment apiVersion:apps/v1kind:Deploymentmetadata:name:azure-clispec:selector:matchLabels:name:azure-clitemplate:metadata:labels:name:azure-cliaadpodidbinding:\u003cselector defined in AzureIdentityBinding\u003espec:containers:- name:azure-cliimage:mcr.microsoft.com/azure-clicommand:- sh- -c- az login --identity --allow-no-subscriptions --debugDaemonSet apiVersion:apps/v1kind:DaemonSetmetadata:name:azure-clispec:selector:matchLabels:name:azure-clitemplate:metadata:labels:name:azure-cliaadpodidbinding:\u003cselector defined in AzureIdentityBinding\u003espec:containers:- name:azure-cliimage:mcr.microsoft.com/azure-clicommand:- sh- -c- az login --identity --allow-no-subscriptions --debugJob apiVersion:batch/v1kind:Jobmetadata:name:azure-clispec:template:metadata:labels:aadpodidbinding:\u003cselector defined in AzureIdentityBinding\u003espec:containers:- name:azure-cliimage:mcr.microsoft.com/azure-clicommand:- sh- -c- az login --identity --allow-no-subscriptions --debugrestartPolicy:NeverbackoffLimit:4CronJob apiVersion:batch/v1beta1kind:CronJobmetadata:name:azure-clispec:schedule:\"*/1 * * * *\"jobTemplate:spec:template:metadata:labels:aadpodidbinding:\u003cselector defined in AzureIdentityBinding\u003espec:containers:- name:azure-cliimage:mcr.microsoft.com/azure-clicommand:- sh- -c- az login --identity --allow-no-subscriptions --debugrestartPolicy:OnFailure","excerpt":"Retry on token retrieval aad-pod-identity retrieves access tokens on …","ref":"/aad-pod-identity/docs/best-practices/","title":"Best Practices"},{"body":"Enable Scale Features flag  Available from 1.5.3 release This flag is enabled by default starting from v1.8.1 release\n AAD Pod Identity adds labels to AzureAssignedIdentities which denote the nodename, podname and podnamespace. When the optional parameter enableScaleFeatures is set to true, the NMI watches for AzureAssignedIdentities will do a label based filtering on the nodename label. This approach is taken because currently Kubernetes does not support field selectors in CRD watches. This reduces the load which NMIs add on API server. When this flag is enabled, NMI will no longer work for AzureAssignedIdentities which were created before 1.5.3-rc5, since they don’t have the labels. Hence please note that this flag renders your setup incompatible with releases before 1.5.3-rc5.\nBatch Create Delete flag  Available from 1.5.3 release\n MIC groups operations based on nodes/VMSS during the given cycle. With createDeleteBatch parameter we can tune the number of operations (CREATE/DELETE/UPDATE) to the API server which are performed in parallel in the context of a node/VMSS.\nClient QPS flag  Available from 1.5.3 release\n Aad-pod-identity has a new flag clientQps which can be used to control the total number of client operations performed per second to the API server by MIC.\nBlock Instance Metadata flag The Azure Metadata API includes endpoints under /metadata/instance which provide information about the virtual machine. You can see examples of this endpoint in the Azure documentation.\nSome of the information returned by this endpoint may be considered sensitive or secret. The response includes information on the operating system and image, tags, resource IDs, network, and VM custom data.\nThis information is legitimately useful for many use cases, but also presents a risk. If an attacker can exploit a vulnerability that allows them to read from this endpoint, they may be able to access sensitive information even if the vulnerable Pod does not use Managed Identity.\nThe blockInstanceMetadata flag for NMI will intercept any requests to this endpoint from Pods which are not using host networking and return an HTTP 403 Forbidden response. This flag is disabled by default to maximize compatibility. Users are encouraged to determine if this option is relevant and beneficial for their use cases.\nImmutableUserMSIs flag  Available from 1.5.4 release\n Aad-pod-identity has a new flag immutable-user-msis which can be used to prevent deletion of specified identities from VM/VMSS. The list is comma separated. Example: 00000000-0000-0000-0000-000000000000,11111111-1111-1111-1111-111111111111\nMetadata header required flag  Available from 1.6.0 release\n  This flag is enabled by default starting from v1.8.4 release\n When you query the Instance Metadata Service, you must provide the header Metadata: true to ensure the request was not unintentionally redirected. You can see examples of this header in the Azure documentation.\nThis is critical especially when you acquire an access token as a mitigation against Server Side Request Forgery (SSRF) attack.\nThe metadataHeaderRequired flag for NMI will block all requests without Metadata header and return an HTTP 400 response. This flag is disabled by default for compatibility, but recommended for users to enable this feature.\nSet Retry-After header in NMI response  Available from v1.8.2 release\n NMI currently has internal retries to handle delays in the identity assignment when the pod requests for a token. In case of clients that have shorter timeouts, the retries can be terminated and the client will not receive a token in the first attempt. This feature flag when enabled will set the Retry-After header to 20s in the NMI response to the client and return a HTTP 503 response. The SDK used by the client will retry the request after 20s.\nHow to enable this feature While enabling this feature, you must also disable the internal retries in NMI.\n If using the yaml to deploy aad-pod-identity, you can enable this feature by setting the --set-retry-after-header=true flag in the NMI container.  Set --retry-attempts-for-created=1, --retry-attempts-for-assigned=1 and --find-identity-retry-interval=1 flags in the NMI container to disable the internal retries in NMI.   If using helm to deploy aad-pod-identity, you can enable this feature by setting nmi.setRetryAfterHeader=true as part of helm install/upgrade.  Set nmi.retryAttemptsForCreated=1, nmi.retryAttemptsForAssigned=1 and nmi.findIdentityRetryIntervalInSeconds=1 flags in the helm install/upgrade command to disable the internal retries in NMI.    Enable deletion of conntrack entries  Available from v1.8.7 release\n NMI redirects Instance Metadata Service (IMDS) requests to itself by setting up iptables rules after it starts running on the node. However, these rules are not applicable to pre-existing connections. In such a scenario, the token request will be directly sent to IMDS instead of being intercepted by NMI. What this means is that the workload pod that runs before the NMI pod on the node can access identities that it doesn’t have access to. The enable-conntrack-deletion flag enables deletion of entries for pre-existing connections to IMDS endpoint, this causes applications which had pre-existing connections to be intercepted by NMI.\nHow to enable this feature  If using the yaml to deploy aad-pod-identity, you can enable this feature by setting the --enable-conntrack-deletion=true flag in the NMI container. If using helm to deploy aad-pod-identity, you can enable this feature by setting nmi.enableConntrackDeletion=true as part of helm install/upgrade.  ","excerpt":"Enable Scale Features flag  Available from 1.5.3 release This flag is …","ref":"/aad-pod-identity/docs/configure/feature_flags/","title":"Feature Flags"},{"body":"Specifically, when a pod is scheduled, the MIC assigns the identity on Azure to the underlying VM/VMSS during the creation phase. When all pods using the identity are deleted, it removes the identity from the underlying VM/VMSS on Azure. The MIC takes similar actions when AzureIdentity or AzureIdentityBinding are created or deleted.\n","excerpt":"Specifically, when a pod is scheduled, the MIC assigns the identity on …","ref":"/aad-pod-identity/docs/concepts/mic/","title":"Managed Identity Controller (MIC)"},{"body":"The authorization request to fetch a Service Principal Token from an MSI endpoint is sent to Azure Instance Metadata Service (IMDS) endpoint (169.254.169.254), which is redirected to the NMI pod. The redirection is accomplished by adding iptable rules to redirect all non-host traffic with IMDS endpoint on port 80 as destination to the NMI endpoint. The NMI server identifies the pod based on the remote address of the request and then queries Kubernetes (through AzureAssignedIdentity) for a matching Azure identity. NMI then makes an Azure Active Directory Authentication Library (ADAL) request to get the token for the client ID and returns it as a response. If the request had client ID as part of the query, it is validated against the admin-configured client ID.\nHere is an example cURL command that will fetch an access token to access ARM within a pod identified by an AAD-Pod-Identity selector:\ncurl 'http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01\u0026resource=https%3A%2F%2Fmanagement.azure.com%2F' -H Metadata:true -s For different ways to acquire an access token within a pod, please refer to this documentation.\nSimilarly, a host can make an authorization request to fetch Service Principal Token for a resource directly from the NMI host endpoint (http://127.0.0.1:2579/host/token/). The request must include the pod namespace podns and the pod name podname in the request header and the resource endpoint of the resource requesting the token. The NMI server identifies the pod based on the podns and podname in the request header and then queries k8s (through AzureAssignedIdentity) for a matching azure identity. Then NMI makes an ADAL request to get a token for the resource in the request, returning the token and the clientid as a response.\nHere is an example cURL command:\ncurl http://127.0.0.1:2579/host/token/?resource=https://vault.azure.net -H \"podname: nginx-flex-kv-int\" -H \"podns: default\" For more information, please refer to the design documentation.\n","excerpt":"The authorization request to fetch a Service Principal Token from an …","ref":"/aad-pod-identity/docs/concepts/nmi/","title":"Node Managed Identity (NMI)"},{"body":"This document highlights the steps to configure and use AAD Pod Identity in custom Azure cloud environments. If you are deploying with helm, then set mic.customCloud.enabled to true (e.g., --set mic.customCloud.enabled=true on the command line) to have the following configuration changes rendered. The custom cloud environment file name can be changed from /etc/kubernetes/akscustom.json by setting mic.customCloud.configPath.\n  Ensure the cloud name in /etc/kubernetes/azure.json is set to AzureStackCloud\n{ \"cloud\": \"AzureStackCloud\", \"tenantId\": \"xxxx\", \"subscriptionId\": \"xxxx\", ... }   Mount the JSON file that contains the custom cloud environment details. The custom cloud environment file is stored in the file system of the Kubernetes node. The go-autorest library is configured to read the Azure environment from file by default for AzureStackCloud\n NOTE: In case of AKS clusters, the custom cloud environment file is /etc/kubernetes/akscustom.json\n The file needs to be mounted only for the MIC pods.\nAdd the custom environment file volume mount in MIC deployment:\n- name:custom-env-filemountPath:/etc/kubernetes/akscustom.jsonreadOnly:trueAdd the custom environment file volume in MIC deployment:\n- name:custom-env-filehostPath:path:/etc/kubernetes/akscustom.json  Set the AZURE_ENVIRONMENT_FILEPATH environment variable as part of MIC deployment. This is used by go-autorest to read the custom cloud environment file.\nAdd the environment variable to MIC deployment:\n- name:AZURE_ENVIRONMENT_FILEPATHvalue:\"/etc/kubernetes/akscustom.json\"  ","excerpt":"This document highlights the steps to configure and use AAD Pod …","ref":"/aad-pod-identity/docs/configure/custom_cloud/","title":"Pod Identity in Custom Cloud"},{"body":"For a complete list of issues, please check our GitHub issues page or file a new issue if your issue is not listed.\n NMI pods not yet running during a cluster autoscaling event User-assigned managed identity deleted and recreated with the same name in Azure  NMI pods not yet running during a cluster autoscaling event NMI redirects Instance Metadata Service (IMDS) requests to itself by setting up iptables rules after it starts running on the node. During cluster scale up, there might be a scenario where the kube-scheduler schedules the workload pod before the NMI pod on the new nodes. In such a scenario, the token request will be directly sent to IMDS instead of being intercepted by NMI. What this means is that the workload pod that runs before the NMI pod on the node can access identities that it doesn’t have access to.\nThere is currently no solution in Kubernetes where a node can be set to NoSchedule until critical addons have been deployed to the cluster. There was a KEP for this particular enhancement - kubernetes/enhancements#1003 which is now closed.\nIdentity not found When the user-assigned managed identities have been deleted and re-created in Azure with the same name, the changes aren’t automatically reflected in the identities on the underlying VM/VMSS. az \u003cvm|vmss\u003e identity show -g \u003cresource group\u003e -n \u003cVM/VMSS name\u003e command output will show the identity with null principalID and clientID. Token request for this identity will fail with identity not found error.\n{ \"principalId\": null, \"tenantId\": null, \"type\": \"UserAssigned\", \"userAssignedIdentities\": { \"/subscriptions/\u003csub\u003e/resourcegroups/\u003cresource group\u003e/providers/Microsoft.ManagedIdentity/userAssignedIdentities/\u003cidentity name\u003e\": { \"clientId\": \"null\", \"principalId\": \"null\" } } } Steps to take if the identity was deleted and re-created with same name -\n Remove identity manually from the VM/VMSS by running az \u003cvm|vmss\u003e identity remove -g \u003crg\u003e -n \u003cVM/VMSS name\u003e --identities \u003cidentity resource id\u003e Update the AzureIdentity with the new clientID for the recreated identity  MIC will detect the change in AzureIdentity and reassign the identity. This reassignment will ensure the identity with correct clientID exists on the underlying VM/VMSS.\nNMI returns status 500 with list pod error See Azure/aad-pod-identity#780 for more details.\n","excerpt":"For a complete list of issues, please check our GitHub issues page or …","ref":"/aad-pod-identity/docs/known-issues/","title":"Known Issues"},{"body":" Available from 1.6.0 release\n Introduction AAD Pod Identity supports 2 modes of operation:\n Standard Mode: In this mode, there is MIC and NMI components deployed to the cluster. MIC handles assigning/un-assigning the identity to the underlying VM/VMSS. NMI will intercept token request, validate if the pod has access to the identity it’s requesting a token for and fetch the token on behalf of the application. Managed Mode: In this mode, there is only NMI. The identity needs to be manually assigned and managed by the user. Refer to this doc for more details on this mode.  Steps to migrate AAD Pod Identity from Standard to Managed mode If you already have AAD Pod Identity setup with Standard mode and would like to migrate to Managed mode:\n NOTE: AAD Pod Identity in Managed Mode only works in namespaced mode. This means the AzureIdentity and AzureIdentityBinding needs to be in the same namespace as the application pod referencing it. This it to ensure RBAC best practices. If you’re running in non-namespace mode, move the AzureIdentity and AzureIdentityBinding to the correct namespaces before proceeding with the steps.\n   Assign the pod identities to the VM/VMSS:\nTo assign the identity to the VM, run the following command:\naz vm identity assign -g \u003cVM resource group name\u003e -n \u003cVM name\u003e --identities \u003cresource ID of managed identity\u003e To assign the identity to VMSS, run the following command:\naz vmss identity assign -g \u003cVM resource group name\u003e -n \u003cVMSS name\u003e --identities \u003cresource ID of managed identity\u003e   Delete the MIC deployment and NMI daemonset\nkubectl delete deploy \u003cmic deployment name\u003e -n \u003cnamespace\u003e kubectl delete daemonset \u003cnmi daemonset name\u003e -n \u003cnamespace\u003e Delete the MIC service accounts and cluster-role\nkubectl delete sa aad-pod-id-mic-service-account -n \u003cnamespace\u003e kubectl delete clusterrole aad-pod-id-mic-role kubectl delete clusterrolebinding aad-pod-id-mic-binding   Delete AzureAssignedIdentity custom resource definition\nThe AzureAssignedIdentity is created and managed by MIC in standard mode. This is not required for managed mode.\nRefer to this doc on how to delete the AzureAssignedIdentities.\n  Install AAD Pod Identity in managed mode\nRefer to this doc on how install AAD Pod Identity in managed mode.\n  ","excerpt":" Available from 1.6.0 release\n Introduction AAD Pod Identity supports …","ref":"/aad-pod-identity/docs/configure/standard_to_managed_mode/","title":"Migrating from Standard to Managed Mode"},{"body":" Available from 1.6.0 release\n  NOTE: The AKS pod-managed identities add-on installs AAD Pod Identity in Managed mode.\n Introduction Starting from 1.6.0 release, 2 modes of operation are supported for pod-identity\n Standard Mode Managed Mode  Standard Mode This is the default mode in which pod-identity will be deployed. In this mode, there are 2 components, MIC (Managed Identity Controller) and NMI (Node Managed Identity). MIC handles the identity assignment/removal from the underlying vm/vmss when new pods using the identity are created/deleted.\nManaged Mode In this mode, there is only the NMI component deployed in the cluster. The identity assignment needs to be manually performed.\nDeploy aad-pod-identity components to an RBAC-enabled cluster in managed mode:\n This installs NMI in managed mode in the kube-system namespace  kubectl apply -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/deploy/infra/managed-mode-deployment.yaml NOTE Managed mode is only supported in namespaced mode. This ensures pods in namespace are only matched with AzureIdentity and AzureIdentityBinding in the same namespace.\nHelm AAD Pod Identity allows users to customize their installation via Helm.\nhelm repo add aad-pod-identity https://raw.githubusercontent.com/Azure/aad-pod-identity/master/charts\rhelm install aad-pod-identity aad-pod-identity/aad-pod-identity --set operationMode=managed\rValues For a list of customizable values that can be injected when invoking helm install, please see the Helm chart configurations.\nTo assign the identity to the VM, run the following command -\naz vm identity assign -g \u003cVM resource group name\u003e -n \u003cVM name\u003e --identities \u003cresource ID of managed identity\u003e To assign the identity to VMSS, run the following command -\naz vmss identity assign -g \u003cVM resource group name\u003e -n \u003cVMSS name\u003e --identities \u003cresource ID of managed identity\u003e Why use Managed mode  Identity assignment on VM takes 10-20s and 40-60s in case of VMSS. In case of cronjobs or applications that require access to the identity and can’t tolerate the assignment delay, it’s best to use managed mode as the identity is manually pre-assigned to the VM/VMSS. In standard mode, MIC requires write permissions on VM/VMSS and Managed Identity Operator permission on all user assigned MSIs. While running in managed mode, since there is no MIC, the role assignments are not required.  ","excerpt":" Available from 1.6.0 release\n  NOTE: The AKS pod-managed identities …","ref":"/aad-pod-identity/docs/configure/pod_identity_in_managed_mode/","title":"Pod Identity in Managed Mode"},{"body":"AAD and Kubernetes The relationship between kubernetes and AAD is covered in three main areas:\n  Cluster Identity: The identity used by the cloud provider running in various kubernetes components to perform operations against Azure, typically against Azure’s resource group where the cluster lives. This identity is set during the cluster bring up process. This is not included in the scope of this proposal.\n  User Identity: What enables user/operator to authenticate against AAD using AAD before using kubectl commands. This is not included in the scope of this proposal.\n  Application Identities: Identities that are used by applications running on kubernetes to access any resources that uses AAD as identity provider. These resources can be ARM, Applications running on the same cluster, on azure, or anywhere else. Managing, assigning these identities is the scope of this document.\n   This proposal does not cover how application can be configured to use AAD as identity/authentication provider.\n Use cases  Kubernetes applications depending on other applications that use AAD as an identity provider. These applications include Azure first party services such as ARM, Azure SQL, and Azure KeyVault.   Azure 1st party services are all moving to use AAD as the primary identity provider.\n  Delegating authorization to tools such as AAD group memberships.\n  Enable identity rotation without application interruption.\n   Example: rotating a service principal password/cert without having to edit secrets assigned directly to applications.\n Provide a framework to enable time-boxed identity assignment. Manually triggered or automated. The same framework can be used for (jit sudo style access with automation tools).   Example: a front end application can have access to centralized data store between midnight and 1 AM during business days only.\n Guiding Principles   Favor little to no change to how users currently write applications against various editions of ADAL. Favor committing changes to SDKs and don’t ask users to change applications that are written for Kubernetes.\n  Favor little to no change in the way users create kubernetes application specs (favor declarative approach). This enables users to focus their development and debugging experience in code they wrote, not code imposed on them.\n   Example: favor annotation and labels over side-cars (even dynamically injected).\n Separate identities from identity assignment applications enables users to swap identities used by the applications.  Processes AAD Identity Management and Assignment (within cluster)   Cluster operators create instances of crd:azureIdentity. Each instance is a kubernetes object representing Azure AAD identity that can be EMSI or service principal (with password).\n  Cluster operators create instances of crd:azureIdentityBinding. Each instance represents binding between pod and crd:azureIdentity.\n  A Controller will run to create crd:azureAssignedIdentity based on crd:azureIdentityBinding linking pod with crd:azureIdentity.\n  Acquiring Tokens  for reference please read Azure VM Managed Service Identity (MSI) and Assign a Managed Service Identity\n   Kubernetes applications (pods) will default to use MSI endpoint.\n  All traffic to MSI endpoint is routed via iptables to a daemon-set that will use sourceIp to identify pod, then find an appropriate crd:azureIdentityBinding. The daemon-set mimics all the REST API offered by MSI endpoint. All tokens are presented to pods on MSI endpoint irrespective of the identity used to back this request (EMSI or service principal).\n  All token issuance will be logged as events attached to crd:azureIdentityBinding for audit purposes.\n  ","excerpt":"AAD and Kubernetes The relationship between kubernetes and AAD is …","ref":"/aad-pod-identity/docs/concepts/block-diagram-and-design/","title":"Block Diagram and Design"},{"body":"CLA The AAD Pod Identity project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\nDevelopment Prerequisites  Go 1.18 Docker an AKS cluster / AKS-Engine cluster Helm 3 A container registry. One of the following would work:  Dockerhub Azure Container Registry (ACR)    Development flow git clone https://github.com/Azure/aad-pod-identity ${GOPATH}/src/github.com/Azure/aad-pod-identity cd ${GOPATH}/src/github.com/Azure/aad-pod-identity export REGISTRY=\u003cRegistryName\u003e # Build MIC and NMI images make image-mic image-nmi # push images to your container registry make push-mic push-nmi # install the above images on your cluster helm install aad-pod-identity manifest_staging/charts/aad-pod-identity \\  --set image.repository=\"${REGISTRY}\" \\  --set mic.tag=v0.0.0-dev \\  --set nmi.tag=v0.0.0-dev Test Standard Unit tests Unit tests focus on testing individual units and components of aad-pod-identity and they don’t require any additional services to execute. They should be fast and great for getting the first signal on whether the implementation works or not. To run unit tests:\nmake unit-test In most cases, pull requests should include an adequate amount of unit tests such that the code coverage of the pull request may not lessen the code coverage of the main branch.\nEnd-to-end tests End-to-end testing tests whether the flow of aad-pod-identity from start to finish is behaving as expected. Following guidelines should be followed when developing E2E tests:\n  Use the aad-pod-identity e2e test framework.\n  Define test spec reflecting real user workflow, e.g. creation of AzureIdentity, AzureIdentityBinding and a pod that consumes the identity.\n  See test/e2e/README.md on how to run the aad-pod-identity e2e test suite locally.\n","excerpt":"CLA The AAD Pod Identity project welcomes contributions and …","ref":"/aad-pod-identity/docs/contributing/","title":"Contributing"},{"body":"Logging Below is a list of commands you can use to view relevant logs of aad-pod-identity components.\nIsolate errors from logs You can use grep ^E and --since flag from kubectl to isolate any errors occurred after a given duration.\nkubectl logs -l component=mic --since=1h | grep ^E kubectl logs -l component=nmi --since=1h | grep ^E  It is always a good idea to include relevant logs from MIC and NMI when opening a new issue.\n Ensure that iptables rule exists To ensure that the correct iptables rule is injected to each node via the NMI pods, the following command ensures that on a given node, there exists an iptables rule where all packets with a destination IP of 169.254.169.254 (IMDS endpoint) are routed to port 2579 of the host network.\nNMI_POD=$(kubectl get pod -l component=nmi -ojsonpath='{.items[?(@.spec.nodeName==\"\u003cNodeName\u003e\")].metadata.name}') kubectl exec $NMI_POD -- iptables -t nat -S aad-metadata The expected output should be:\n-N aad-metadata\r-A aad-metadata ! -s 127.0.0.1/32 -d 169.254.169.254/32 -p tcp -m tcp --dport 80 -j DNAT --to-destination 10.240.0.34:2579\r-A aad-metadata -j RETURN\rRun a pod to validate your identity setup You could run the following commands to validate your identity setup (assuming you have the proper AzureIdentity and AzureIdentityBinding deployed):\nkubectl run azure-cli -it --image=mcr.microsoft.com/azure-cli --labels=aadpodidbinding=\u003cselector defined in AzureIdentityBinding\u003e /bin/bash # within the azure-cli shell az login --identity --allow-no-subscriptions --debug az login --identity will use the Azure identity bound to the azure-cli pod and perform a login to Azure via Azure CLI. If succeeded, you would have an output as below:\nurllib3.connectionpool : Starting new HTTP connection (1): 169.254.169.254:80\rurllib3.connectionpool : http://169.254.169.254:80 \"GET /metadata/identity/oauth2/token?resource=https%3A%2F%2Fmanagement.core.windows.net%2F\u0026api-version=2018-02-01 HTTP/1.1\" 200 1667\rmsrestazure.azure_active_directory : MSI: Retrieving a token from http://169.254.169.254/metadata/identity/oauth2/token, with payload {'resource': 'https://management.core.windows.net/', 'api-version': '2018-02-01'}\rmsrestazure.azure_active_directory : MSI: Token retrieved\r...\r[\r{\r\"environmentName\": \"AzureCloud\",\r\"homeTenantId\": \"\u003cREDACTED\u003e\",\r\"id\": \"\u003cREDACTED\u003e\",\r\"isDefault\": true,\r\"managedByTenants\": [],\r\"name\": \"\u003cREDACTED\u003e\",\r\"state\": \"Enabled\",\r\"tenantId\": \"\u003cREDACTED\u003e\",\r\"user\": {\r\"assignedIdentityInfo\": \"MSI\",\r\"name\": \"systemAssignedIdentity\",\r\"type\": \"servicePrincipal\"\r}\r}\r]\rBased on the logs above, Azure CLI was able to retrieve a token from http://169.254.169.254:80/metadata/identity/oauth2/token. Its request is routed to the NMI pod that is running within the same node. Identify which node the Azure CLI pod is scheduled to by running the following command:\nkubectl get pods -owide NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES azure-cli 1/1 Running 1 12s 10.240.0.117 k8s-agentpool1-95854893-vmss000002 \u003cnone\u003e \u003cnone\u003e Take a note at the node the pod is scheduled to and its IP address. Check the logs of the NMI pod that is scheduled to the same node. You should be able to see a token requested by the azure-cli pod, identified by its pod IP address 10.240.0.117:\nkubectl logs \u003cnmi pod name\u003e ... I0821 18:22:50.810806 1 standard.go:72] no clientID or resourceID in request. default/azure-cli has been matched with azure identity default/demo I0821 18:22:50.810895 1 standard.go:178] matched identityType:0 clientid:7eb6##### REDACTED #####a6a9 resource:https://management.core.windows.net/ I0821 18:22:51.348117 1 server.go:190] status (200) took 537597287 ns for req.method=GET reg.path=/metadata/identity/oauth2/token req.remote=10.240.0.117 ... Common Issues Common issues or questions that users have run into when using pod identity are detailed below.\nIgnoring azure identity \u003cpodns\u003e/\u003cpodname\u003e, error: Invalid resource id: “”, must match /subscriptions/\u003csubid\u003e/resourcegroups/\u003cresourcegroup\u003e/providers/Microsoft.ManagedIdentity/userAssignedIdentities/\u003cname\u003e If you are using MIC v1.6.0+, you will need to ensure the correct capitalization of AzureIdentity and AzureIdentityBinding fields. For more information, please refer to this section.\nLinkedAuthorizationFailed If you received the following error message in MIC:\nCode=\"LinkedAuthorizationFailed\" Message=\"The client '\u003cClientID\u003e' with object id '\u003cObjectID\u003e' has permission to perform action 'Microsoft.Compute/\u003cVMType\u003e/write' on scope '\u003cVM/VMSS scope\u003e'; however, it does not have permission to perform action 'Microsoft.ManagedIdentity/userAssignedIdentities/assign/action' on the linked scope(s) '\u003cUserAssignedIdentityScope\u003e' or the linked scope(s) are invalid.\"\rIt means that your cluster service principal / managed identity does not have the correct role assignment to assign the chosen user-assigned identities to the VM/VMSS. For more information, please follow this documentation to allow your cluster service principal / managed identity to perform identity-related operation.\nPast issues:\n https://github.com/Azure/aad-pod-identity/issues/585  Unable to remove AzureAssignedIdentity after MIC pods are deleted With release 1.6.1, finalizers have been added to AzureAssignedIdentity to ensure the identities are successfully cleaned up by MIC before they’re deleted. However, in scenarios where the MIC deployment is force deleted before it has completed the clean up of identities from the underlying node, the AzureAssignedIdentity will be left behind as it contains a finalizer.\nTo delete all AzureAssignedIdentity, run the following command:\nkubectl get azureassignedidentity -A -o=json | jq '.items[].metadata.finalizers=null' | kubectl apply -f - kubectl delete azureassignedidentity --all To delete only a specific AzureAssignedIdentity, run the following command:\nkubectl get azureassignedidentity \u003cname\u003e -n \u003cnamespace\u003e -o=json | jq '.items[].metadata.finalizers=null' | kubectl apply -f - kubectl delete azureassignedidentity \u003cname\u003e -n \u003cnamespace\u003e Past issues:\n https://github.com/Azure/aad-pod-identity/issues/644  Token requests calls fail with i/o timeout If you received the following or similar error in your application:\nazure.BearerAuthorizer#WithAuthorization: Failed to refresh the Token for request to https://management.azure.com/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/dnsZones?api-version=2018-05-01: StatusCode=0 -- Original Error: adal: Failed to execute the refresh request. Error = 'Get \\\"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01\u0026resource=https%3A%2F%2Fmanagement.core.windows.net%2F\\\": dial tcp 169.254.169.254:80: i/o timeout'\rIt means there is a network policy blocking egress traffic to 169.254.169.254 from the host. NMI pods run on hostNetwork and listen on 127.0.0.1:2579. Please ensure there is a network policy that allows traffic to 127.0.0.1:2579. Example GlobalNetworPolicy configuration for Calico:\nkind:GlobalNetworkPolicyapiVersion:crd.projectcalico.org/v1metadata:name:egress-localhostspec:types:- Egressegress:- action:Allowprotocol:TCPdestination:nets:- 127.0.0.1port:[2579]Past issues:\n https://github.com/Azure/aad-pod-identity/issues/716 https://github.com/Azure/aad-pod-identity/issues/821  Spark jobs failed to acquire tokens Spark jobs that use AAD Pod Identity as a way to acquire tokens should add the following configurations (assuming AzureIdentity and AzureIdentityBinding are deployed beforehand):\n... --conf spark.kubernetes.driver.label.aadpodidbinding=\u003cAzureIdentityBinding selector\u003e \\ --conf spark.kubernetes.executor.label.aadpodidbinding=\u003cAzureIdentityBinding selector\u003e \\ ... Past issues:\n https://github.com/Azure/aad-pod-identity/issues/947  ","excerpt":"Logging Below is a list of commands you can use to view relevant logs …","ref":"/aad-pod-identity/docs/troubleshooting/","title":"Troubleshooting"},{"body":"Introduction AAD pod identity is a foundational service that other applications depend upon, it is recommended to monitor the same.\nLiveliness probe and Prometheus metrics are available in both Managed Identity Controller (MIC) and the Node Managed Identity (NMI) components.\nLiveliness Probe MIC and NMI exposes /healthz endpoint with content of “Active/Not Active” state. State “Active” is being returned if the component has started successfully and “Not Active” otherwise.\nPrometheus Metrics Prometheus is a systems and service monitoring system. It collects metrics from configured targets at given intervals, evaluates rule expressions,displays the results, and can trigger alerts if some condition is observed to be true.\nThe following OpenCensus metrics are exposed in AAD pod identity system via prometheus exporter.\n1. aadpodidentity_assigned_identity_addition_duration_seconds\nHistogram that tracks the duration (in seconds) it takes for Assigned identity addition operations.\n2. aadpodidentity_assigned_identity_addition_count\nCounter that tracks the cumulative number of assigned identity addition operations.\n3. aadpodidentity_assigned_identity_deletion_duration_seconds\nHistogram that tracks the duration (in seconds) it takes for Assigned identity deletion operations.\n4. aadpodidentity_assigned_identity_deletion_count\nCounter that tracks the cumulative number of assigned identity deletion operations.\n5. aadpodidentity_nmi_operations_duration_seconds\nHistogram that tracks the latency (in seconds) of NMI operations to complete. Broken down by operation type, status code.\n6. aadpodidentity_mic_cycle_duration_seconds\nHistogram that tracks the duration (in seconds) it takes for a single cycle in MIC.\n7. aadpodidentity_mic_cycle_count\nCounter that tracks the number of cycles executed in MIC.\n8. aadpodidentity_mic_new_leader_election_count\nCounter that tracks the cumulative number of new leader election in MIC.\n9. aadpodidentity_cloud_provider_operations_errors_count\nCounter that tracks the cumulative number of cloud provider operations errors. Broken down by operation type.\n10. aadpodidentity_cloud_provider_operations_duration_seconds\nHistogram that tracks the duration (in seconds) it takes for cloud provider operations. Broken down by operation type.\n11. aadpodidentity_kubernetes_api_operations_errors_count\nCounter that tracks the cumulative number of kubernetes api operations errors. Broken down by operation type.\n12. aadpodidentity_imds_operations_errors_count\nCounter that tracks the cumulative number of imds token operation errors. Broken down by operation type.\n13. aadpodidentity_imds_operations_duration_seconds\nHistogram that tracks the duration (in seconds) it takes for IMDS token operations. Broken down by operation type.\nPrometheus Metrics Endpoints    Component Default Metric Port Metric Path     NMI 9090 /metrics   MIC 8888 /metrics    ","excerpt":"Introduction AAD pod identity is a foundational service that other …","ref":"/aad-pod-identity/docs/configure/prometheus_monitoring/","title":"Monitoring Pod Identity with Prometheus"},{"body":"Support aad-pod-identity is an open source project that is not covered by the Microsoft Azure support policy. Please search open issues here, and if your issue isn’t already represented please open a new one. The project maintainers will respond to the best of their abilities.\n","excerpt":"Support aad-pod-identity is an open source project that is not covered …","ref":"/aad-pod-identity/docs/support/","title":"Support"},{"body":"Policy to allow aad-pod-identity to work in PSP enabled clusters The NMI component of aad-pod-identity runs on hostNetwork and in privileged mode. If the cluster has Pod Security Policies (PSP) enabled that block hostNetwork and privileged mode, then the aad-pod-identity will be unable to run. The following step will create a PSP that allows the required access for aad-pod-identity components only in the desired namespace -\nkubectl apply -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/examples/psp-podidentity.yaml ","excerpt":"Policy to allow aad-pod-identity to work in PSP enabled clusters The …","ref":"/aad-pod-identity/docs/configure/enable_psp_enabled_clusters/","title":"Enable PSP Clusters"},{"body":"Code of Conduct This project has adopted the Microsoft Open Source Code of Conduct. For more information, see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.\n","excerpt":"Code of Conduct This project has adopted the Microsoft Open Source …","ref":"/aad-pod-identity/docs/code-of-conduct/","title":"Code of Conduct"},{"body":"  #td-cover-block-0 { background-image: url(/aad-pod-identity/featured-background_hue73480f450192455b260acf4d4247b11_356631_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/aad-pod-identity/featured-background_hue73480f450192455b260acf4d4247b11_356631_1920x1080_fill_q75_catmullrom_top.jpg); } }  Microsoft's Azure AD Pod Identity Project Get Started   An Azure Compute OSS Upstream Team project that enables Kubernetes applications to access cloud resources securely with Azure Active Directory (AAD).\n\n        The AAD Pod Identity project uses Kubernetes primitives, administrators configure identities and bindings to match pods. Then without any code modifications, your containerized applications can leverage any resource in the cloud that depends on AAD as an identity provider.       Interested in the AAD Pod Identity Project? Head over to our docs page to get started.\nRead more …\n   Get Involved! Help shape and/or enhance the AAD Pod Identity Project. Contributions are always welcome!\nRead more …\n   Follow us on Twitter! Find out about new features and how our users are using Docsy.\nRead more …\n --    ","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/aad-pod-identity/","title":"Azure AD Pod Identity"},{"body":"v1.8.13 Bug Fixes  add handler for invalid token requests (#1325)  Security Fix  fix CVE-2022-27664 (#1326)  Maintenance  run apt update \u0026\u0026 apt upgrade -y in Dockerfile (#1317)  v1.8.13 Bug Fixes  set Content-Length header in NMI response (#1297)  Security Fix  fix CVE-2021-46828 (#1306) fix CVE-2022-37434 (#1310)  Maintenance  update to go 1.19 (#1307) update debian-iptables to bullseye-v1.5.1 (#1309)  v1.8.11 Bug Fixes  set Content-Length header in NMI response (#1297)  Security Fix  fix CVE-2021-4209 (#1294) fix multiple CVEs (#1299)  Documentation  add release cadence to readme (#1296)  v1.8.10 Security Fix  fix CVE-2022-1664 (#1285) fix CVE-2022-2068 (#1290)  Documentation  add release cadence (#1286)  Other Improvements  Allow selecting bind address for NMI (#1284) update debian-iptables to bullseye-v1.5.0 (#1292)  v1.8.9 Security Fix  fix CVE-2018-25032 (#1261) fix CVE-2022-1271 (#1270)  Other Improvements  upgrade to debian-iptables:bullseye-v1.3.0 (#1263) update to go 1.18 (#1273) bump ansi-regex from 5.0.0 to 5.0.1 in /website (#1275)  v1.8.8 Security Fix  fix CVE-2022-23218 (#1259)  Helm  use policy/v1 for PodDisruptionBudget (#1254) update nmi affinity sample in charts (#1256)  Other Improvements  remove redundant token get from demo (#1258)  v1.8.7 Bug Fixes  make metadata header required configurable in helm (#1240) delete conntrack entries after adding iptables rules on initialization (#1243)  Documentation  add disclaimer for current project status (#1231)  Security Fix  fix CVE-2021-43618 (#1224) enable readOnlyRootFilesystem for MIC (#1225) fix CVE-2021-3995, CVE-2021-3996 (#1241)  Other Improvements  add semantic.yml (#1214)  v1.8.6 Features  return http 503 when IMDS healthcheck fails (#1206)  Maintenance  remove armv7 from build platforms (#1180) update debian-iptables to bullseye-v1.1.0 (#1200) upgrade various packages to remove jwt-go v3.2.0 dependency (#1205) update adal deps to v0.9.18 (#1208)  Helm  support custom cloud configuration in helm chart (#1203)  v1.8.5 Documentation  Fix typo in homepage docs (#1169) add note about managed mode in role assignments doc (#1173)  Maintenance  replace deprecated codecov uploader with GitHub Actions (#1167) update nmi to bullseye (#1170) (#1169) bootstrap buildx builder after creating (#1175) install qemu instead of docker/binfmt (#1176)  Security Fix  fix CVE-2021-37750 (#1178)  v1.8.4 Breaking Changes The metadata header required flag is enabled by default to prevent SSRF attacks. Check Metadata Header Required for more information. To disable the metadata header check, set --metadata-header-required=false in NMI container args.\nBug Fixes  update the node name label as part of AzureAssignedIdentity update (#1161)  Documentation  specify the latest version number containing the breaking changes (#1150)  Maintenance  set –metadata-header-required to true by default (#1158) update debian-iptables to buster-v1.6.7 (#1160) bump dependencies to newer versions (#1159) update to go 1.17 (#1153)  Security Fix  bump go.mongodb.org/mongo-driver to v1.5.1 and add SECURITY.md (#1156)  Testing  add an option to test metadata header (#1155)  v1.8.3 Documentations  add set-retry-after-header feature flag (#1128) fix doc links (#1131)  Helm  Expose updateStrategy configuration for NMI daemonset (#1138)  Security  fix CVE-2021-33910, CVE-2021-3712 (#1144)  Test Improvements  exclude website changes for pr trigger (#1129))  Other Improvements  update debian-iptables base to buster-v1.6.6 (#1134)) add redacted client ID in the error log (#1141))  v1.8.2 Security  dockerfile: fix CVE-2021-33910 (#1116)  Other Improvements  Create stale.yml (b2fdbfde42c5fa8da68622f87d023c7dcf2dddfd) chore: update .github/stale.yml (#1117) chore: switch from probot/stale to actions/stale (#1118)  Bug Fixes  fix: change stale bot trigger frequency to every day (#1119)  Features  feat: option to set Retry-After in NMI responses (#1114)  Test Improvements  test: reuse helm values during helm upgrade (#1121)  v1.8.1 Features  Add additional columns to kubectl output (#1093)  Documentations  docs: fix managed mode URL (#1066) Update documentation to use separator between output flag \u0026 argument (#1081) docs: fix typo in feature flags (#1083)  Helm  Automatically checksum the mic-secret secret to roll mic deployment (#1061) helm: correct spec field for AzureIdentityBinding (#1069) release: helm charts 4.1.1 (#1076) Adds a default affinity rule to values.yaml (#1082)  Security  chore: bump golang.org/x/crypto to v0.0.0-20201216223049-8b5274cf687f (#1073) dockerfile: fix CVE-2021-3520 (#1078) chore(deps): bump browserslist from 4.14.5 to 4.16.6 in /website (#1080) chore(deps): bump glob-parent from 5.1.1 to 5.1.2 in /website (#1091) chore(deps): bump postcss from 7.0.35 to 7.0.36 in /website (#1096) dockerfile: upgrade multiple packages due to CVEs (#1097) chore: update debian base to buster-v1.6.5 (#1101)  Bug Fixes  fix: use correct flags for demo image (#1087) fix: Remove incorrect fields from gatekeeper e2e test (#1090) fix: prevent overwriting of AzureAssignedIdentity when creating it (#1100) fix: mount kubelet config to /var/lib/kubelet for non-rbac deployment (#1098)  Other Improvements  ci: switch to staging-pool (#1095) chore: enable scale features by default (#1099)  v1.8.0 Breaking Changes   The API version of Pod Identity’s CRDs (AzureIdentity, AzureIdentityBinding, AzureAssignedIdentity, AzurePodIdentityException) have been upgraded from apiextensions.k8s.io/v1beta1 to apiextensions.k8s.io/v1. For Kubernetes clsuters with \u003c 1.16, apiextensions.k8s.io/v1 CRDs would not work. You can either:\n Continue using AAD Pod Identity v1.7.5 or Upgrade your cluster to 1.16+, then upgrade AAD Pod Identity.  If AAD Pod Identity was previously installed using Helm, subsequent helm install or helm upgrade would not upgrade the CRD API version from apiextensions.k8s.io/v1beta1 to apiextensions.k8s.io/v1 (although kubectl get crd -oyaml would display apiextensions.k8s.io/v1 since the API server internally converts v1beta1 CRDs to v1, it lacks a structural schema, which is what AAD Pod Identity introduced in v1.8.0). If you wish to upgrade to the official v1 CRDs for AAD Pod Identity:\nkubectl apply -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/charts/aad-pod-identity/crds/crd.yaml With managed mode enabled, you can remove the unused AzureAssignedIdentity CRD if you wish.\n# MANAGED MODE ONLY! kubectl delete crd azureassignedidentities.aadpodidentity.k8s.io   Features  feat: add register.go to add crds to scheme (#1053)  Documentations  docs: add standard to managed mode migration doc (#1055) docs: add installation steps for Azure RedHat Openshift (#1056)  Bug Fixes  fix: remove ImagePullPolicy: Always (#1046) fix: inject TypeMeta during type upgrade (#1057)  Helm  helm: ability to add AzureIdentities with the same name across different namespaces (#1036) helm: ability to parameterize the number replicas MIC deployment (#1041) helm: create optional user roles for AAD Pod Identity (#1043)  Security  dockerfile: upgrade debian-iptables to buster-v1.6.0 (#1038) migrate from satori uuid (#1062) chore(deps): bump lodash from 4.17.20 to 4.17.21 in /website (#1063)  Other Improvements  chore: add stale.yml (#1032) chore: promote crd to apiextensions.k8s.io/v1 and remove role assignments after e2e test (#1035) chore: remove vmss list from demo (#1037) ci: remove CODECOV_TOKEN env var (#1045) ci: create a make target to automate manifest promotion (#1047)  v1.7.5 Breaking Changes  (Only apply to app version ≥ v1.7.5 / chart version ≥ 4.0.0) AAD Pod Identity has dropped Helm 2 starting from chart version 4.0.0/app version 1.7.5. To install or upgrade to the latest version of AAD Pod Identity, please use Helm 3 instead. Refer to this guide on how to migrate from Helm 2 to Helm 3.  Helm  helm: Add missing weight key in node affinity example (#996) helm: Added Pod Security Policy (#998) helm: remove helm 2 support (#1001)  Features  feat: add cluster identity to immutable list (#981)  Bug Fixes  fix: skip kubenet check if allowed is true (#999) fix: skip PATCH call if no identities to assign or un-assign (#1007) fix: add case insensitive handler pattern (#1021) fix: add FileOrCreate to kubelet config file (#1024)  Documentation  docs: add note about system-assigned not supported (#973) docs: improve documentations on multiple areas (#991) docs: vmss typo (#1016)  Test Improvements  ci: switch from service principal to managed identity for e2e test (#974) ci: use Upstream Pool for soak \u0026 load test (#982) test: make backward compat test deterministic (#986) flake: change mic sync interval from 1h to 30s (#989) test: use kubectl to get vmss name (#1027)  Other Improvements  chore: update to go 1.16 (#983) chore: update k8s lib versions (#1010) chore(deps): bump y18n from 4.0.0 to 4.0.1 in /website (#1028)  v1.7.4 Helm  helm: add podLabels parameter (#963)  Bug Fixes  fix: prevent errors from being overwritten by metric report function (#967)  Features  feat: add configuration for custom user agent (#965)  v1.7.3 Bug Fixes  fix: check if provisioning state is not nil (#960)  v1.7.2 Breaking Changes  The forceNameSpaced helm configuration variable is removed. Use forceNamespaced instead to configure pod identity to run in namespaced mode.  Features  feat: add arm64 build (#950)  Bug Fixes  fix: fix typos in stats variables (#919) fix: drop all unnecessary root capabilities for NMI (#940) fix: copy response header and status code to http.ResponseWriter (#946)  Security  dockerfile: fix CVE-2020-29362, CVE-2020-29363, CVE-2020-29361 (#924) dockerfile: upgrade debian-iptables to buster-v1.4.0 (#948)  Helm  helm: remove deprecated forceNameSpaced from values.yaml (#927) helm: skip MIC exception installation when using managed mode (#936)  Documentation  docs: document breaking change on azureIdentities (#944)  Other Improvements  chore: update github pr template (#925) cleanup: refactor demo code (#930) chore: switch to using golang builder (#952)  v1.7.1 Breaking Changes   (Only apply to app version ≥ v1.7.1 / chart version ≥ 3.0.0) azureIdentities in values.yaml is converted to a map instead of a list of identities.\nThe following is an example of the required change in values.yaml from helm chart 2.x.x to 3.x.x:\n-azureIdentities: - - name: \"azure-identity\" - # if not defined, then the azure identity will be deployed in the same namespace as the chart - namespace: \"\" - # type 0: MSI, type 1: Service Principal - type: 0 - # /subscriptions/subscription-id/resourcegroups/resource-group/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-name - resourceID: \"resource-id\" - clientID: \"client-id\" - binding: - name: \"azure-identity-binding\" - # The selector will also need to be included in labels for app deployment - selector: \"demo\" +azureIdentities: + \"azure-identity\": + # if not defined, then the azure identity will be deployed in the same namespace as the chart + namespace: \"\" + # type 0: MSI, type 1: Service Principal + type: 0 + # /subscriptions/subscription-id/resourcegroups/resource-group/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-name + resourceID: \"resource-id\" + clientID: \"client-id\" + binding: + name: \"azure-identity-binding\" + # The selector will also need to be included in labels for app deployment + selector: \"demo\"   Bug Fixes  allow overwriting NODE_RESOURCE_GROUP in role-assignment.sh (#873)  Other Improvements  fix CVE-2020-1971 (#905) fix CVE-2020-27350 (#909)  Documentation  add note about specifying which identity to use (#869) fix | in markdown table (#882) use az aks show for node resource group \u0026 more convenient command to run role assignment script (#879) reduce number of role assignments (#883) add spring boot example which interacts with blob storage (#878) add changelog \u0026 development section and move java-blob example to website (#891) Added instructions how to mitigate ARP spoofing on kubenet clusters with OPA/Gatekeeper (#894) add warning note to kubenet docs (#911)  Helm  rename forceNameSpaced to forceNamespaced (#874) bump helm chart version to 2.1.0 for aad-pod-identity v1.7.0 (#884) add topologySpreadConstraints and PodDisruptionBudget in helm chart (#886) adding option to configure kubeletConfig (#906) deprecate forceNameSpaced value (#914) add notes (#916) use map for azureIdentities instead of list in helm chart (#899)  Test Improvements  remove getIdentityValidatorArgs (#910) less error-prone identityvalidator (#901)  v1.7.0 Breaking Changes   With Azure/aad-pod-identity#842, aad-pod-identity no longer works on clusters with kubenet as the network plugin. For more details, please see Deploy AAD Pod Identity in a Cluster with Kubenet.\nIf you still wish to install aad-pod-identity on a kubenet-enabled cluster, set the helm chart value nmi.allowNetworkPluginKubenet to true in the helm command:\nhelm (install|upgrade) ... --set nmi.allowNetworkPluginKubenet=true ...   Features  support JSON logging format (#839) disable aad-pod-identity by default for kubenet (#842) add auxiliary tenant ids for service principal (#843)  Bug Fixes  account for 150+ identity assignment and unassignment (#847)  Other Improvements  include image scanning as part of CI \u0026 set non-root user in Dockerfile (#803)  Documentation  initial layout for static site (#801) update website theme to docsy (#828) update invalid URLs in website (#832) fix casing of “priorityClassName” parameters in README.md (#856) add docs for various topics (#858) s/cluster resource group/node resource group (#862) add docs for configuring in custom cloud (#863) fix broken links and typo (#864)  Helm  remove extra indentation in crd.yaml (#833) make runAsUser conditional for MIC in helm (#844)  Test Improvements  remove aks cluster version in e2e (#808) decrease length of RG name to allow cluster creation in eastus2euap (#810) health check with podIP from the busybox container (#840) add gosec as part of linting (#850) remove –ignore-unfixed for trivy (#854)  v1.6.3 Features  throttling - honor retry after header (#742) reconcile identity assignment on Azure (#734)  Bug Fixes  add certs volume for non-rbac manifests (#713) Report original error from getPodListRetry (#762) initialize klog flags for NMI (#767) ensure stats collector doesn’t aggregate stats from multiple runs (#750)  Other Improvements  add deploy manifests and helm charts to staging dir (#736) fix miscellaneous linting problem in the codebase (#733) remove privileged: true for NMI daemonset (#745) Update to go1.15 (#751) automate role assignments and improve troubleshooting guide (#754) set dnspolicy to clusterfirstwithhostnet for NMI (#776) bump debian-base to v2.1.3 and debian-iptables to v12.1.2 (#783) add logs for ignored pods (#785)  Documentation  docs: fix broken test standard link in GitHub Pull Request template (#710) Fixed typo (#757) Fixed Grammar (#758) add doc for deleting/recreating identity with same name (#786) add best practices documentation (#779)  Helm  add release namespace to chart manifests (#741) Add imagePullSecretes to the Helm chart (#774) Expose metrics port (#777) add user managed identity support to helm charts (#781)  Test Improvements  add e2e test for block-instance-metadata (#715) add aks as part of pr and nightly test (#717) add load test pipeline to nightly job (#744) install aad-pod-identity in kube-system namespace (#747) bump golangci-lint to v1.30.0 (#759)  v1.6.2 Features  Acquire an token with the certificate of service principal (#517) Handle MSI auth requests by ResourceID (#540) make NMI listen only on localhost (#658) trigger MIC sync when a pod label changes (#682)  Bug Fixes  check iptable rules match expected (#663)  Other Improvements  update base image with debian base (#641) update node selector label to kubernetes.io/os (#652) better error messages and handling (#666) add default known types to scheme (#668) Remove unused cert volumes from mic deployment (#670)  Documentation  update typed namespacedname case for sp example (#649) list components prometheus enpoints (#660) add helm upgrade guide and known issues (#683) add requirements to PR template and test standard to CONTRIBUTING.md (#706)  Helm  add aks add-on exception in kube-system (#634) disable crd-install when using Helm 3 (#642) update default http probe port at deploy to 8085 (#708)  Test Improvements  new test framework for aad-pod-identity (#640) convert e2e test cases from old to new framework (#650), (#656), (#662), (#664), (#667), (#680) add soak testing as part of nightly build \u0026 test and remove Jenkinsfile (#687) update e2e suite to remove flakes (#693), (#695), (#697), (#699), (#701) add e2e tests with resource id (#696) add code coverage as part of CI (#705)  v1.6.1 Features  re-initialize MIC cloud client when cloud config is updated (#590) add finalizer for assigned identity (#593) make update user msi calls retriable (#601)  Bug Fixes  Fix issue that caused failures with long pod name \u003e 63 chars (#545) Fix updating assigned identity when azure identity updated (#559)  Other Improvements  Add linting tools in Makefile (#551) Code clean up and enable linting tools in CI (#597) change to 404 instead if no azure identity found (#629)  Documentation  document required role assignments (#592) add --subscription parameter to az cli commands (#602) add mic pod exception to deployment (#611) reduce ambiguity in demo and role assignment docs (#620) add support information to readme (#623) update docs for pod-identity exception (#624)  Helm  make cloud config configurable in helm chart (#598) Support multiple identities in helm chart (#457)  v1.6.0 Breaking Changes With Azure/aad-pod-identity#398, the client-go library is upgraded to v0.17.2, where CRD fields are now case sensitive. If you are upgrading MIC and NMI from v1.x.x to v1.6.0, MIC v1.6.0+ will upgrade the fields of existing AzureIdentity and AzureIdentityBinding on startup to the new format to ensure backward compatibility. A configmap called aad-pod-identity-config is created to record and confirm the successful type upgrade.\nHowever, for future AzureIdentity and AzureIdentityBinding created using v1.6.0+, the following fields need to be changed:\nAzureIdentity    \u003c 1.6.0 \u003e= 1.6.0     ClientID clientID   ClientPassword clientPassword   ResourceID resourceID   TenantID tenantID    AzureIdentityBinding    \u003c 1.6.0 \u003e= 1.6.0     AzureIdentity azureIdentity   Selector selector    AzurePodIdentityException    \u003c 1.6.0 \u003e= 1.6.0     PodLabels podLabels    Features  Add support for pod-identity managed mode (#486) Deny requests without metadata header to avoid SSRF (#500)  Bug Fixes  Fix issue that caused failures with long pod name \u003e 63 chars (#545) Fix updating assigned identity when azure identity updated (#559)  Other Improvements  Switch to using klog for logging (#449) Create internal API for aadpodidentity (#459) Switch to using PATCH instead of CreateOrUpdate for identities (#522) Update client-go version to v0.17.2 (#398) Update to go1.14 (#543) Add validation for resource id format (#548)  v1.5.5 Bug Fixes  Prevent flushing custom iptable rules frequently (#474)  v1.5.4 Features  Add block-instance-metadata flag (#396) Add metrics (#429) Adding support for whitelisting of user-defined managed identities (#431)  Bug Fixes  Fix glog flag parse error in nmi (#435)  Other Improvements  Add application/json header for all return paths (#424) Update golang used to build binaries (#426) Reduce log verbosity for debug log (#433) Move to latest Alpine 3.10.4 (#446) Validate resource param exists in request (#450)  v1.5.3 Bug Fixes  Fix concurrent map read and map write while updating stats (#344) Fix list calls to use local cache inorder to reduce api server load (#358) Clean up assigned identities if node not found (#367) Fixes to identity operations on VMSS (#379) Fix namespaced multiple binding/identity handling and verbose logs (#388) Fix panic issues while identity ids is nil (#403)  Other Improvements  Set Content-Type on token response (#341) Redact client id in NMI logs (#343) Add user agent to kube-api calls (#353) Add resource and request limits (#372) Add user agent to ARM calls (#387) Scale and performance improvements (#408) Remove unused GET in CreateOrUpdate (#411) Remove deprecated API Version usages (#416)  v1.5.2 Bug Fixes  Fix the token backward compat in host based token fetching (#337)  v1.5.1 Bug Fixes  Append NMI version to the User-Agent for adal only once (#333)  Other Improvements  Change ‘updateStrategy’ for nmi DaemonSet to RollingUpdate (#334)  v1.5 Features  Support aad-pod-identity in init containers (#191) Cleanup iptable chain and rule on uninstall (#211) Remove dependency on azure.json (#221) Add states for AzureAssignedIdentity and improve performance (#219) System MSI cluster support (#265) Leader election in MIC (#277) Liveness probe for MIC and NMI (#309) Application Exception (#310)  Bug Fixes  Fix AzureIdentity with service principal (#197) Determine resource manager endpoint based on cloud name (#226) Fix incorrect resource endpoint with sp (#251) Fix vmss identity deletion for ID in use (#203) Fix removal of user assigned identity from nodes with system assigned (#259) Handle case sensitive id check (#271) Fix assigned id deletion when no identity exists (#320)  Other Improvements  Use go modules (#179) Log binary versions of MIC and NMI in logs (#216) List CRDs via cache and avoid extra work on pod update (#232) Reduce identity assignment times (#199) NMI retries and ticker for periodic sync reconcile (#272) Update error status code based on state (#292) Process identity assignment/removal for nodes in parallel (#305) Update base alpine image to 3.10.1 (#324)  ","excerpt":"v1.8.13 Bug Fixes  add handler for invalid token requests (#1325) …","ref":"/aad-pod-identity/changelog/","title":"Changelog"},{"body":" ❗ IMPORTANT: As of Monday 10/24/2022, AAD Pod Identity is deprecated. As mentioned in the announcement, AAD Pod Identity has been replaced with Azure Workload Identity. Going forward, we will no longer add new features to this project in favor of Azure Workload Identity. We will continue to provide critical bug fixes until Azure Workload Identity reaches general availability. Following that, we will provide CVE patches until September 2023, at which time the project will be archived.\n AAD Pod Identity enables Kubernetes applications to access cloud resources securely with Azure Active Directory using User-assigned managed identity and Service Principal.\n Note: Configuring system-assigned managed identity with AAD Pod Identity to access cloud resources is not supported.\n Using Kubernetes primitives, administrators configure identities and bindings to match pods. Then without any code modifications, your containerized applications can leverage any resource in the cloud that depends on AAD as an identity provider.\nBreaking Changes v1.8.4 The metadata header required flag is enabled by default to prevent SSRF attacks. Check Metadata Header Required for more information. To disable the metadata header check, set --metadata-header-required=false in NMI container args.\nv1.8.0   The API version of Pod Identity’s CRDs (AzureIdentity, AzureIdentityBinding, AzureAssignedIdentity, AzurePodIdentityException) have been upgraded from apiextensions.k8s.io/v1beta1 to apiextensions.k8s.io/v1. For Kubernetes clusters with \u003c 1.16, apiextensions.k8s.io/v1 CRDs would not work. You can either:\n Continue using AAD Pod Identity v1.7.5 or Upgrade your cluster to 1.16+, then upgrade AAD Pod Identity.  If AAD Pod Identity was previously installed using Helm, subsequent helm install or helm upgrade would not upgrade the CRD API version from apiextensions.k8s.io/v1beta1 to apiextensions.k8s.io/v1 (although kubectl get crd -oyaml would display apiextensions.k8s.io/v1 since the API server internally converts v1beta1 CRDs to v1, it lacks a structural schema, which is what AAD Pod Identity introduced in v1.8.0). If you wish to upgrade to the official v1 CRDs for AAD Pod Identity:\nkubectl apply -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/charts/aad-pod-identity/crds/crd.yaml With managed mode enabled, you can remove the unused AzureAssignedIdentity CRD if you wish.\n# MANAGED MODE ONLY! kubectl delete crd azureassignedidentities.aadpodidentity.k8s.io   v1.7.5  AAD Pod Identity has dropped Helm 2 starting from chart version 4.0.0/app version 1.7.5. To install or upgrade to the latest version of AAD Pod Identity, please use Helm 3 instead. Refer to this guide on how to migrate from Helm 2 to Helm 3.  v1.7.2  The forceNameSpaced helm configuration variable is removed. Use forceNamespaced instead to configure pod identity to run in namespaced mode.  v1.7.1   azureIdentities in values.yaml is converted to a map instead of a list of identities.\nThe following is an example of the required change in values.yaml from helm chart 2.x.x to 3.x.x:\n-azureIdentities: - - name: \"azure-identity\" - # if not defined, then the azure identity will be deployed in the same namespace as the chart - namespace: \"\" - # type 0: MSI, type 1: Service Principal - type: 0 - # /subscriptions/subscription-id/resourcegroups/resource-group/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-name - resourceID: \"resource-id\" - clientID: \"client-id\" - binding: - name: \"azure-identity-binding\" - # The selector will also need to be included in labels for app deployment - selector: \"demo\" +azureIdentities: + \"azure-identity\": + # if not defined, then the azure identity will be deployed in the same namespace as the chart + namespace: \"\" + # type 0: MSI, type 1: Service Principal + type: 0 + # /subscriptions/subscription-id/resourcegroups/resource-group/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-name + resourceID: \"resource-id\" + clientID: \"client-id\" + binding: + name: \"azure-identity-binding\" + # The selector will also need to be included in labels for app deployment + selector: \"demo\"   v1.7.0   With Azure/aad-pod-identity#842, aad-pod-identity no longer works on clusters with kubenet as the network plugin. For more details, please see Deploy AAD Pod Identity in a Cluster with Kubenet.\nIf you still wish to install aad-pod-identity on a kubenet-enabled cluster, set the helm chart value nmi.allowNetworkPluginKubenet to true in the helm command:\nhelm (install|upgrade) ... --set nmi.allowNetworkPluginKubenet=true ...   v1.6.0 With Azure/aad-pod-identity#398, the client-go library is upgraded to v0.17.2, where CRD fields are now case sensitive. If you are upgrading MIC and NMI from v1.x.x to v1.6.0, MIC v1.6.0+ will upgrade the fields of existing AzureIdentity and AzureIdentityBinding on startup to the new format to ensure backward compatibility. A configmap called aad-pod-identity-config is created to record and confirm the successful type upgrade.\nHowever, for future AzureIdentity and AzureIdentityBinding created using v1.6.0+, the following fields need to be changed:\nAzureIdentity    \u003c 1.6.0 \u003e= 1.6.0     ClientID clientID   ClientPassword clientPassword   ResourceID resourceID   TenantID tenantID    AzureIdentityBinding    \u003c 1.6.0 \u003e= 1.6.0     AzureIdentity azureIdentity   Selector selector    AzurePodIdentityException    \u003c 1.6.0 \u003e= 1.6.0     PodLabels podLabels    Ready to get started? To get started, see the Getting Started page, or you can visit the GitHub repo.\n","excerpt":" ❗ IMPORTANT: As of Monday 10/24/2022, AAD Pod Identity is deprecated. …","ref":"/aad-pod-identity/docs/","title":"Documentation"},{"body":"","excerpt":"","ref":"/aad-pod-identity/search/","title":"Search Results"}]